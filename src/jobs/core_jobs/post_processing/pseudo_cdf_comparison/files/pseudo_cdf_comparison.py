#!/usr/bin/env python3

# OpenBACH is a generic testbed able to control/configure multiple
# network/physical entities (under test) and collect data from them. It is
# composed of an Auditorium (HMIs), a Controller, a Collector and multiple
# Agents (one for each network entity that wants to be tested).
#
#
# Copyright Â© 2016-2023 CNES
#
#
# This file is part of the OpenBACH testbed.
#
#
# OpenBACH is a free software : you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY, without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program. If not, see http://www.gnu.org/licenses/.


"""Provide time period summary of data generated by OpenBACH jobs"""


__author__ = 'Viveris Technologies'
__credits__ = '''Contributors:
 * Aichatou Garba Abdou <aichatou.garba-abdou@viveris.fr>
'''


import os
import syslog
import argparse
import tempfile
import itertools
from datetime import datetime,timedelta

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from dateutil.parser import parse
from pkg_resources import parse_version as version

import collect_agent
from data_access.post_processing import Statistics, save, _Plot


SET_AXIS_PARAMETERS = {'axis': 1}
if version(pd.__version__) < version('1.5.0'):
    SET_AXIS_PARAMETERS['inplace'] = False
else:
    SET_AXIS_PARAMETERS['copy'] = True


def format_label(labels):
    return [f'{item}%' for item in labels]


def main(
        agents_name, job_name, statistic_name, timestamp_boundaries,
        reference, step, display_ratio,unit,
        figure_title, y_label, x_label, agents_legend,
        stats_with_suffixes, use_grid, use_legend):
    statistics = Statistics.from_default_collector()
    statistics.origin = 0

    with tempfile.TemporaryDirectory(prefix='openbach-pseudo_cdf_comparison-') as root_folder:
        if not timestamp_boundaries:
            timestamps = None
        else:
            timestamps=timestamp_boundaries

        figure, axis = plt.subplots()

        for agent, agent_legend in zip(agents_name, itertools.chain(agents_legend, itertools.repeat(None))):
            data_collection = statistics.fetch(
                    job=job_name, agent=agent,
                    suffix=None if stats_with_suffixes else '',
                    fields=[statistic_name], timestamps=timestamps)

            df = pd.concat([
                    plot.dataframe.set_axis(
                        plot.dataframe.columns.get_level_values('statistic'),
                        **SET_AXIS_PARAMETERS)
                    for plot in data_collection
            ])

            df = (df.dropna() / display_ratio / reference) * 100
            df.sort_values(by=statistic_name, inplace=True)
            df.reset_index(drop=True, inplace=True)
            values_amount = 100 // step
            cdf = df.loc[np.linspace(df.index.max(), df.index.min(), values_amount, dtype=int, endpoint=False)[::-1]][statistic_name]
            cdf.index = np.linspace(100, 0, values_amount, dtype=int, endpoint=False)[::-1]
            cdf.name = agent_legend or agent
            cdf.plot(ax=axis)

        if not y_label:
            collect_agent.send_log(
                    syslog.LOG_WARNING,
                    'no y-axis label provided for the {} statistic of job '
                    'instances {}: using the empty string instead'.format(statistic_name, job_name))
            y_label = ''
        axis.set_ylabel(y_label)

        if not x_label:
            collect_agent.send_log(
                    syslog.LOG_WARNING,
                    'no x-axis label provided for the {} statistic of job '
                    'instances {}: using the empty string instead'.format(statistic_name, job_name))
            x_label = ''
        axis.set_xlabel(x_label)

        x_axis = np.linspace(0, 100, 21, dtype=int)
        axis.set_xticks(x_axis) 
        axis.set_xticklabels(format_label(x_axis), rotation=60, fontsize=9, weight=5)

        y_axis = np.linspace(0, 120, 9, dtype=int)
        axis.set_yticks(y_axis)
        axis.set_yticklabels(format_label(y_axis),  fontsize=10, weight=5)

        if use_legend:
            axis.legend()
        if use_grid:
            axis.grid(axis='y')
        if figure_title:
            axis.set_title(figure_title)

        filepath = os.path.join(root_folder, 'pseudo_cdf_comparison_{}.png'.format(statistic_name))
        save(figure,filepath,set_legend=True)
        collect_agent.store_files(collect_agent.now(), figure=filepath)


if __name__ == '__main__':
    with collect_agent.use_configuration('/opt/openbach/agent/jobs/pseudo_cdf_comparison/pseudo_cdf_comparison_rstats_filter.conf'):
        parser = argparse.ArgumentParser(description=__doc__)
        parser.add_argument(
                'agents', metavar='AGENT_NAME', nargs='+',
                help='Agent name to fetch data from')
        parser.add_argument(
                'job', metavar='JOB_NAME',
                help='Job name to fetch data from')
        parser.add_argument(
                'statistic', metavar='STATISTIC',
                help='Statistic name to be analysed')
        parser.add_argument(
                'reference', type=int,
                help='Reference value for comparison')
        parser.add_argument(
                '-d', '--timestamp-boundaries',type=int,
                metavar=('BEGIN_DATE', 'END_DATE'), nargs=2,
                help='Start and End date in format YYYY:MM:DD hh:mm:ss')
        parser.add_argument(
                '-p', '--step', type=int, default=1,
                help='Percentage step on the Y-axis')
        parser.add_argument(
                '-u', '--unit',metavar='UNIT',
                help='Stats Unit to display on the table')
        parser.add_argument(
                '-R', '--display-ratio',type=float,
                metavar='DISPLAY-RATIO', 
                help='Prefix of displayed unit')
        parser.add_argument(
                '-t', '--title',
                help='The title of figure')
        parser.add_argument(
                '-y', '--ylabel',
                help='The label of y-axis')
        parser.add_argument(
                '-x', '--xlabel',
                help='The label of x-axis')
        parser.add_argument(
                '-a', '--agents-legend', nargs='+', default=[],
                help='Agent name to display on the legend')
        parser.add_argument(
                '-w', '--no-suffix', action='store_true',
                help='Do not plot statistics with suffixes')
        parser.add_argument(
                '--hide-legend', '--no-legend', action='store_true',
                help='Do not draw any legend on the graph')
        parser.add_argument(
                '--hide-grid', '--no-grid', action='store_true',
                help='Do not show grid on the graph')

        args = parser.parse_args()
        stats_with_suffixes = not args.no_suffix
        use_grid = not args.hide_grid
        use_legend = not args.hide_legend

        main(
            args.agents, args.job, args.statistic,
            args.timestamp_boundaries, args.reference, args.step,
            args.display_ratio,args.unit,
            args.title, args.ylabel, args.xlabel,
            args.agents_legend, stats_with_suffixes, use_grid, use_legend)
