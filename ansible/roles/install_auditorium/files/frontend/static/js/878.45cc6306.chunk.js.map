{"version":3,"file":"static/js/878.45cc6306.chunk.js","mappings":"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","sources":["components/Scenarios/ScenarioInstancesListItem.tsx","components/Scenarios/ScenarioInstanceDialogItem.tsx","components/Scenarios/ScenarioInstanceExportDialog.tsx","api/influx.ts","components/Scenarios/ScenarioInstanceStatisticsDialog.tsx","components/Scenarios/ScenarioInstanceDialog.tsx","components/Scenarios/ScenarioInstancesList.tsx","components/Scenarios/ScenarioLaunchDialog.tsx","components/common/DownloadButton.tsx","components/common/JsonEditor.tsx","utils/openbach-functions.ts"],"sourcesContent":["import React from 'react';\nimport moment from 'moment';\n\nimport Checkbox from '@mui/material/Checkbox';\nimport IconButton from '@mui/material/IconButton';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemButton from '@mui/material/ListItemButton';\nimport ListItemIcon from '@mui/material/ListItemIcon';\nimport ListItemText from '@mui/material/ListItemText';\n\nimport StopIcon from '@mui/icons-material/Stop';\nimport {red} from '@mui/material/colors';\n\nimport ScenarioInstanceIcon from '../common/ScenarioInstanceStatusIcon';\n\nimport {getScenarioInstance, stopScenarioInstance} from '../../api/scenarios';\nimport {useDispatch} from '../../redux';\nimport type {IScenarioInstance} from '../../utils/interfaces';\n\n\nconst ScenarioInstancesListItem: React.FC<Props> = (props) => {\n    const {instance: {status, scenario_instance_id, scenario_name, start_date}, onSelect, checked, onCheck} = props;\n    const dispatch = useDispatch();\n    const [verbose, storeVerbose] = React.useState<boolean>(false);\n\n    const refresh = React.useCallback(() => {\n        dispatch(getScenarioInstance({instance: scenario_instance_id, verbose}));\n    }, [scenario_instance_id, verbose, dispatch]);\n\n    const handleClick = React.useCallback(() => {\n        storeVerbose(true);\n        onSelect(scenario_instance_id);\n    }, [scenario_instance_id, onSelect]);\n\n    const handleStop = React.useCallback((event: React.MouseEvent) => {\n        event.preventDefault();\n        event.stopPropagation();\n        dispatch(stopScenarioInstance({instance: scenario_instance_id}));\n    }, [scenario_instance_id, dispatch]);\n\n    const handleSelect = React.useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n        event.preventDefault();\n        event.stopPropagation();\n        onCheck(scenario_instance_id, event.target.checked);\n    }, [scenario_instance_id, onCheck]);\n\n    React.useEffect(() => {\n        if (verbose) {\n            refresh();\n        }\n\n        if (status === \"Running\" || status === \"Scheduling\") {\n            const id = setInterval(refresh, verbose ? 5000 : 1500);\n            return () => {clearInterval(id);};\n        }\n    }, [status, verbose, refresh]);\n\n    return (\n        <ListItem disablePadding secondaryAction={\n            status === \"Running\" ? (\n                <IconButton edge=\"end\" onClick={handleStop}>\n                    <StopIcon sx={{color: red[500]}} />\n                </IconButton>\n            ) : status !== \"Scheduling\" ? (\n                <Checkbox edge=\"end\" disableRipple checked={checked} onChange={handleSelect} />\n            ) : undefined\n        }>\n            <ListItemButton onClick={handleClick}>\n                <ListItemIcon>\n                    <ScenarioInstanceIcon status={status} />\n                </ListItemIcon>\n                <ListItemText primary={scenario_name} secondary={moment(start_date).format(\"YYYY-MM-DD HH:mm:ss\")} />\n            </ListItemButton>\n        </ListItem>\n    );\n};\n\n\ninterface Props {\n    instance: IScenarioInstance;\n    checked: boolean;\n    onCheck: (id: number, checked: boolean) => void;\n    onSelect: (id: number) => void;\n}\n\n\nexport default ScenarioInstancesListItem;\n","import React from 'react';\n\nimport ListItemButton from '@mui/material/ListItemButton';\nimport ListItemText from '@mui/material/ListItemText';\n\nimport ListItem from '../common/NestedListItem';\nimport OpenbachFunctionIcon from '../common/OpenbachFunctionIcon';\nimport OpenbachFunctionStatusIcon from '../common/OpenbachFunctionStatusIcon';\nimport JobInstanceStatusIcon from '../common/JobInstanceStatusIcon';\nimport ScenarioInstanceStatusIcon from '../common/ScenarioInstanceStatusIcon';\n\nimport {\n    isStartJobInstance, isStartScenarioInstance,\n    isStopJobInstances, isStopScenarioInstance,\n    formatScenarioDuration, extractOpenbachFunctionName,\n    idToLabel,\n} from '../../utils/openbach-functions';\nimport type {IScenarioInstance, IOpenbachFunctionInstance} from '../../utils/interfaces';\n\n\nconst titleFromLabel = (title: string, {label}: IOpenbachFunctionInstance): string => {\n    if (!label) {\n        return title;\n    }\n    return `[${label}] (${title})`;\n};\n\n\nconst ScenarioInstanceDialogItem: React.FC<Props> = (props) => {\n    const {instance: {arguments: args, openbach_functions}} = props;\n\n    if (!openbach_functions) {\n        return (\n            <ListItemButton>\n                <ListItemText primary=\"Fetching full instance, please wait\" />\n            </ListItemButton>\n        );\n    }\n\n    return (\n        <React.Fragment>\n            {args && <ListItem\n                primary=\"Arguments\"\n                leftIcon={<OpenbachFunctionIcon function=\"argument\" />}\n                nestedItems={args.map(({name, value}, index) => (\n                    <ListItemButton key={index}>\n                        <ListItemText primary={name} secondary={value} />\n                    </ListItemButton>\n                ))}\n            />}\n            {openbach_functions.map((openbachFunction: IOpenbachFunctionInstance, index: number) => {\n                if (isStartJobInstance(openbachFunction)) {\n                    const {status, job} = openbachFunction;\n                    return (\n                        <ListItem\n                            key={index}\n                            primary={titleFromLabel(\"Start job instance\", openbachFunction)}\n                            leftIcon={<OpenbachFunctionIcon function=\"openbach_function\" />}\n                            rightIcon={<OpenbachFunctionStatusIcon status={status} />}\n                            initiallyOpen\n                            inset\n                            nestedItems={job && <ListItem\n                                primary={`${job.name} on ${job.entity} (${job.agent})`}\n                                secondary={`(job instance id: ${job.id})`}\n                                rightIcon={<JobInstanceStatusIcon status={job.status} />}\n                                leftIcon={<OpenbachFunctionIcon function=\"start_job_instance\" />}\n                            />}\n                        />\n                    )\n                } else if (isStartScenarioInstance(openbachFunction)) {\n                    const {status, scenario} = openbachFunction;\n                    return (\n                        <ListItem\n                            key={index}\n                            primary={titleFromLabel(\"Start scenario instance\", openbachFunction)}\n                            leftIcon={<OpenbachFunctionIcon function=\"openbach_function\" />}\n                            rightIcon={<OpenbachFunctionStatusIcon status={status} />}\n                            initiallyOpen\n                            inset\n                            nestedItems={scenario && <ListItem\n                                primary={scenario.scenario_name}\n                                secondary={formatScenarioDuration(scenario)}\n                                rightIcon={<ScenarioInstanceStatusIcon status={scenario.status} />}\n                                leftIcon={<OpenbachFunctionIcon function=\"start_scenario_instance\" />}\n                                initiallyOpen\n                                nestedItems={<ScenarioInstanceDialogItem instance={openbachFunction.scenario} />}\n                            />}\n                        />\n                    );\n                } else if (isStopJobInstances(openbachFunction)) {\n                    const ids = openbachFunction.stop_job_instances.openbach_function_ids.map(\n                        (id: number) => idToLabel(id, openbach_functions)\n                    );\n                    return (\n                        <ListItem\n                            key={index}\n                            primary={titleFromLabel(\"Stop job instance\", openbachFunction)}\n                            secondary={\"Stopping jobs \" + ids.join(\", \")}\n                            leftIcon={<OpenbachFunctionIcon function=\"openbach_function\" />}\n                            rightIcon={<OpenbachFunctionStatusIcon status={openbachFunction.status} />}\n                        />\n                    );\n                } else if (isStopScenarioInstance(openbachFunction)) {\n                    const {openbach_function_id: id} = openbachFunction.stop_scenario_instance;\n                    return (\n                        <ListItem\n                            key={index}\n                            primary={titleFromLabel(\"Stop scenario instance\", openbachFunction)}\n                            secondary={\"Stopping scenario \" + idToLabel(id, openbach_functions)}\n                            leftIcon={<OpenbachFunctionIcon function=\"openbach_function\" />}\n                            rightIcon={<OpenbachFunctionStatusIcon status={openbachFunction.status} />}\n                        />\n                    );\n                }\n\n                const obfName = extractOpenbachFunctionName(openbachFunction);\n                return (\n                    <ListItem\n                        key={index}\n                        primary={titleFromLabel(obfName || \"unknown\", openbachFunction)}\n                    />\n                );\n            })}\n        </React.Fragment>\n    );\n};\n\n\ninterface Props {\n    instance: IScenarioInstance;\n}\n\n\nexport default ScenarioInstanceDialogItem;\n","import React from 'react';\n\nimport Checkbox from '@mui/material/Checkbox';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\n\nimport type {IFilesCount} from '../../utils/interfaces';\n\n\nconst ScenarioInstanceExportDialog: React.FC<Props> = (props) => {\n    const {files, onChange} = props;\n    const [rows, storeRows] = React.useState<Row[]>(\n        Object.entries(files).reduce(\n            (accumulator, [jobName, counts]) => accumulator.concat(Object.entries(counts).map(\n                ([statName, count]) => [false, jobName, statName, count]\n            )),\n            [] as Row[],\n        )\n    );\n\n    const handleSelectAll = React.useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n        const selected = event.target.checked;\n        storeRows((rows: Row[]) => rows.map(\n            ([s, jobName, statName, count]: Row) => [selected, jobName, statName, count]\n        ));\n    }, []);\n\n    const handleClick = React.useCallback((index: number) => (event: React.MouseEvent<unknown>) => {\n        storeRows((rows: Row[]) => rows.map(([s, j, n, c]: Row, i: number) => [i === index ? !s : s, j, n, c]));\n    }, []);\n\n    React.useEffect(() => {\n        onChange(rows);\n    }, [rows, onChange]);\n\n    const numSelected = rows.reduce((total: number, row: Row) => row[0] ? total + 1 : total, 0);\n\n    return (\n        <TableContainer>\n            <Table size=\"medium\">\n                <TableHead>\n                    <TableRow>\n                        <TableCell padding=\"checkbox\">\n                            <Checkbox\n                                color=\"primary\"\n                                indeterminate={numSelected > 0 && numSelected < rows.length}\n                                checked={rows.length > 0 && numSelected === rows.length}\n                                onChange={handleSelectAll}\n                            />\n                        </TableCell>\n                        <TableCell>Job Name</TableCell>\n                        <TableCell>File</TableCell>\n                        <TableCell>Amount</TableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {rows.map(([selected, jobName, statName, count]: Row, index: number) => (\n                        <TableRow\n                            key={index}\n                            hover\n                            onClick={handleClick(index)}\n                            role=\"checkbox\"\n                            tabIndex={-1}\n                            selected={selected}\n                            sx={{cursor: \"pointer\"}}\n                        >\n                            <TableCell padding=\"checkbox\">\n                                <Checkbox color=\"primary\" checked={selected} />\n                            </TableCell>\n                            <TableCell>{jobName}</TableCell>\n                            <TableCell>{statName}</TableCell>\n                            <TableCell>{count}</TableCell>\n                        </TableRow>\n                    ))}\n                </TableBody>\n            </Table>\n        </TableContainer>\n    );\n};\n\n\ninterface Props {\n    files: IFilesCount;\n    onChange: (rows: Row[]) => void;\n}\n\n\ntype Row = [boolean, string, string, number];\n\n\nexport default ScenarioInstanceExportDialog;\n","import moment from 'moment';\nimport {doFetch, asyncThunk} from './base';\n\nimport type {IScenarioInstance, IChronografStatistic} from '../utils/interfaces';\n\n\ninterface InfluxNames {\n    [jobName: string]: string[];\n}\n\n\ninterface InfluxNamesAndSuffixes {\n    statistics: string[];\n    suffixes: string[];\n}\n\n\ninterface ChronografQuery {\n    instance: IScenarioInstance;\n    statistics: IChronografStatistic[];\n    grouped: boolean;\n}\n\n\ninterface ChronografQueryResult {\n    type: string;\n    source: string;\n    query: string;\n    text: string;\n}\n\n\ninterface ChronografCellResult {\n    i: string;\n    x: number;\n    y: number;\n    w: number;\n    h: number;\n    name: string;\n    queries: ChronografQueryResult[];\n}\n\n\ninterface ChronografDashboardResult {\n    id: number;\n    name: string;\n    cells: ChronografCellResult[];\n}\n\n\nexport const getStatisticsNames = asyncThunk<InfluxNames, {project: string;}>(\n    'influx/getStatisticsNames',\n    async ({project}, {dispatch}) => {\n        return await doFetch<InfluxNames> (\n            \"/openbach/statistic/\" + project,\n            dispatch,\n        );\n    },\n);\n\n\nexport const getStatisticsNamesAndSuffixes = asyncThunk<InfluxNamesAndSuffixes, {jobId: number;}>(\n    'influx/getStatisticsNamesAndSuffixes',\n    async ({jobId}, {dispatch}) => {\n        return await doFetch<InfluxNamesAndSuffixes> (\n            \"/openbach/statistic/\" + jobId,\n            dispatch,\n        );\n    },\n);\n\n\ninterface ChronografIntermediate extends Omit<IChronografStatistic, \"statName\"> {\n    targets: string[];\n}\n\n\nexport const createChronografDashboard = asyncThunk<ChronografDashboardResult, ChronografQuery>(\n    'influx/createChronografDashboard',\n    async ({instance, statistics, grouped}, {dispatch}) => {\n        let targets: string[] = [];\n        const graphs: ChronografIntermediate[] = [];\n        statistics.slice().sort((a: IChronografStatistic, b: IChronografStatistic) => {\n            if (a.jobId === b.jobId) {\n                if (a.unit === b.unit) {\n                    return 0;\n                }\n                return a.unit < b.unit ? -1 : 1;\n            }\n            return a.jobId - b.jobId;\n        }).forEach((s: IChronografStatistic, index: number, array: IChronografStatistic[]) => {\n            const {jobAgent, jobName, jobId, statName, unit} = s;\n            if (!grouped || index === 0 || array[index - 1].jobId !== jobId || array[index - 1].unit !== unit) {\n                targets = [];\n                graphs.push({jobName, jobAgent, jobId, targets, unit});\n            }\n            targets.push(statName);\n        });\n\n        const dashboard = {\n            cells: graphs.map((graph: ChronografIntermediate, index: number) => ({\n                h: 4,\n                name: `${graph.jobName} (#${graph.jobId})`,\n                queries: graph.targets.map((statName: string) => ({\n                    query: [\n                        `SELECT \"${statName}\" FROM \"openbach\".\"openbach\".\"${graph.jobName}\"`,\n                        `WHERE time > ${moment(instance.start_date).valueOf()}ms`,\n                        `AND time < ${instance.stop_date ? moment(instance.stop_date).add(1, \"s\").valueOf() + \"ms\" : \"now\"}`,\n                        `AND \"@job_instance_id\"='${graph.jobId}' GROUP BY \"@suffix\" FILL(null)`,\n                    ].join(\" \"),\n                    source: \"\",\n                    text: `${statName} (${graph.unit})`,\n                    type: \"influxql\",\n                })),\n                w: 12,\n                x: 0,\n                y: 4 * index,\n            })),\n            name: `Scenario instance #${instance.owner_scenario_instance_id}`,\n        };\n        \n        return await doFetch<ChronografDashboardResult> (\n            \"/chronograf/api/dashboards\",\n            dispatch,\n            \"POST\",\n            dashboard,\n        );\n    },\n);\n","import React from 'react';\n\nimport Checkbox from '@mui/material/Checkbox';\nimport DialogContentText from '@mui/material/DialogContentText';\nimport FormGroup from '@mui/material/FormGroup';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport List from '@mui/material/List';\nimport TextField from '@mui/material/TextField';\n\nimport ListItem from '../common/NestedListItem';\n\nimport {getStatisticsNames} from '../../api/influx';\nimport {useDispatch} from '../../redux';\nimport {setMessage} from '../../redux/message';\nimport {isStartJobInstance, isStartScenarioInstance} from '../../utils/openbach-functions';\nimport type {IScenarioInstance, IChronografStatistic} from '../../utils/interfaces';\n\n\nconst getJobNames = (scenario?: IScenarioInstance): Job[] => {\n    let jobs: Job[] = [];\n\n    if (scenario && scenario.openbach_functions) {\n        scenario.openbach_functions.forEach((openbachFunction) => {\n            if (isStartJobInstance(openbachFunction)) {\n                if (openbachFunction.job) {\n                    const {name, id, agent} = openbachFunction.job;\n                    jobs.push({name, id, agent});\n                }\n            } else if (isStartScenarioInstance(openbachFunction)) {\n                jobs = jobs.concat(getJobNames(openbachFunction.scenario));\n            }\n        });\n    }\n\n    return jobs;\n};\n\n\nconst ScenarioInstanceStatisticsDialog: React.FC<Props> = (props) => {\n    const {project, instance, error, onChange} = props;\n    const dispatch = useDispatch();\n    const [statistics, storeStatistics] = React.useState<{[jobName: string]: string[];}>({});\n    const [selected, storeSelected] = React.useState<Form>({});\n    const [groupedTogether, storeGroupedTogether] = React.useState<boolean>(false);\n\n    const handleGroupedTogetherChange = React.useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n        storeGroupedTogether(event.target.checked);\n    }, []);\n\n    const jobs = React.useMemo(() => {\n        return getJobNames(instance);\n    }, [instance]);\n\n    const isSelected = React.useCallback((jobId: number, statName: string) => {\n        const stats = selected[jobId];\n        if (stats) {\n            const entry = stats[statName];\n            if (entry) {\n                return entry[0];\n            }\n        }\n        return false;\n    }, [selected]);\n\n    const unit = React.useCallback((jobId: number, statName: string) => {\n        const stats = selected[jobId];\n        if (stats) {\n            const entry = stats[statName];\n            if (entry) {\n                return entry[1];\n            }\n        }\n        return \"\";\n    }, [selected]);\n\n    const handleSelectedChange = React.useCallback((jobId: number, statName: string) => (event: React.ChangeEvent<HTMLInputElement>) => {\n        const selected = event.target.checked;\n        storeSelected((s) => {\n            const stats = s[jobId] || {};\n            const entry = stats[statName];\n            return {...s, [jobId]: {...stats, [statName]: entry ? [selected, entry[1]] : [selected, \"\"]}};\n        });\n    }, []);\n\n    const handleUnitChange = React.useCallback((jobId: number, statName: string) => (event: React.ChangeEvent<HTMLInputElement>) => {\n        const value = event.target.value;\n        storeSelected((s) => {\n            const stats = s[jobId] || {};\n            const entry = stats[statName];\n            return {...s, [jobId]: {...stats, [statName]: entry ? [entry[0], value] : [false, value]}};\n        });\n    }, []);\n\n    React.useEffect(() => {\n        storeStatistics({});\n        const promise = dispatch(getStatisticsNames({project}));\n        promise.unwrap().then((payload) => {\n            storeStatistics(payload);\n        }).catch((error: Error) => {\n            if (error.name !== \"AbortError\") {\n                dispatch(setMessage(\"Statistics names could not be fetched: \" + error.message));\n            }\n        });\n        return () => {promise.abort();};\n    }, [project, dispatch]);\n\n    React.useEffect(() => {\n        const stats = Object.entries(selected).reduce(\n            (accumulator, [jobID, statistics]: [string, FormJob]) => accumulator.concat(\n                Object.entries(statistics).filter(\n                    ([statName, entry]: [string, FormEntry]) => entry[0]\n                ).map(\n                    ([statName, entry]: [string, FormEntry]) => {\n                        const jobId = Number(jobID);\n                        const unit = entry[1];\n                        const j = jobs.find(({id}: Job) => id === jobId);\n                        if (j) {\n                            const {agent: jobAgent, name: jobName} = j;\n                            return {jobAgent, jobName, jobId, statName, unit};\n                        } else {\n                            return {jobAgent: \"\", jobName: \"\", jobId, statName, unit};\n                        }\n                    }\n                )\n            ),\n            [] as IChronografStatistic[],\n        );\n        onChange({grouped: groupedTogether, statistics: stats});\n    }, [selected, groupedTogether, jobs, onChange]);\n\n    if (error != null) {\n        return (\n            <React.Fragment>\n                <DialogContentText>\n                    Chronograf returned the error {error} when trying to\n                    create the dashboard for the selected statistics.\n                </DialogContentText>\n                <DialogContentText>\n                    Would you like to open Chronograf to further understand the problem?\n                </DialogContentText>\n            </React.Fragment>\n        );\n    }\n\n    return (\n        <React.Fragment>\n            <List>\n                {jobs.map(({name, id, agent}: Job, index: number) => (\n                    <ListItem\n                        key={index}\n                        primary={`${name} (id ${id} on ${agent})`}\n                        initiallyOpen\n                        nestedItems={\n                            (statistics[name] || []).map((statName: string, i: number) => (\n                                <ListItem\n                                    key={i}\n                                    primary={statName}\n                                    leftIcon={<Checkbox\n                                        checked={isSelected(id, statName)}\n                                        onChange={handleSelectedChange(id, statName)}\n                                    />}\n                                    rightIcon={<TextField\n                                        margin=\"dense\"\n                                        variant=\"standard\"\n                                        label=\"Units\"\n                                        value={unit(id, statName)}\n                                        onChange={handleUnitChange(id, statName)}\n                                        sx={{width: 200}}\n                                    />}\n                                />\n                            ))\n                        }\n                    />\n                ))}\n            </List>\n            <FormGroup>\n                <FormControlLabel\n                    control={<Checkbox checked={groupedTogether} onChange={handleGroupedTogetherChange} />}\n                    label=\"Select this option to group in the same graph the statistics of a single job that share the same units\"\n                />\n            </FormGroup>\n        </React.Fragment>\n    );\n};\n\n\ninterface Props {\n    instance: IScenarioInstance;\n    project: string;\n    error?: string;\n    onChange: (data: {grouped: boolean; statistics: IChronografStatistic[];}) => void;\n}\n\n\ninterface Job {\n    id: number;\n    name: string;\n    agent: string;\n}\n\n\ninterface Form {\n    [id: number]: FormJob;\n}\n\n\ninterface FormJob {\n    [statName: string]: FormEntry;\n}\n\n\ntype FormEntry = [boolean, string];\n\n\nexport default ScenarioInstanceStatisticsDialog;\n","import React from 'react';\n\nimport List from '@mui/material/List';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogContentText from '@mui/material/DialogContentText';\n\nimport Dialog from '../common/ActionDialog';\nimport DialogItem from './ScenarioInstanceDialogItem';\nimport DialogExport from './ScenarioInstanceExportDialog';\nimport DialogStatistics from './ScenarioInstanceStatisticsDialog';\nimport ListItem from '../common/NestedListItem';\nimport ScenarioInstanceStatusIcon from '../common/ScenarioInstanceStatusIcon';\n\nimport {downloadURL} from '../../api/base';\nimport {getScenarioInstanceFilesCount, stopScenarioInstance, deleteScenarioInstance} from '../../api/scenarios';\nimport {createChronografDashboard} from '../../api/influx';\nimport {useDispatch} from '../../redux';\nimport {formatScenarioDuration} from '../../utils/openbach-functions';\nimport type {IScenarioInstance, IFilesCount, IChronografStatistic} from '../../utils/interfaces';\n\n\nconst ScenarioInstanceDialog: React.FC<Props> = (props) => {\n    const {instance, onClose} = props;\n    const {project_name, scenario_instance_id: id, owner_scenario_instance_id: owner, scenario_name, status, start_date, stop_date} = instance;\n    const dispatch = useDispatch();\n    const [screen, storeScreen] = React.useState<\"stats\" | \"export\" | \"delete\">();\n    const [files, storeFiles] = React.useState<IFilesCount>({});\n    const [exported, storeExported] = React.useState<[boolean, string, string, number][]>([]);\n    const [chronografData, storeChronografData] = React.useState<ChronografQuery>({grouped: false, statistics: []});\n    const [chronografError, storeChronografError] = React.useState<string>();\n\n    const handleOpenStatistics = React.useCallback(() => {\n        storeScreen(\"stats\");\n    }, []);\n\n    const handleOpenExport = React.useCallback(() => {\n        const promise = dispatch(getScenarioInstanceFilesCount({instance: id}));\n        promise.unwrap().then((payload) => {\n            storeFiles(payload);\n            if (Object.keys(payload).length === 0) {\n                downloadURL(\"/openbach/scenario_instance/\" + id + \"/csv/\");\n            } else {\n                storeScreen(\"export\");\n            }\n        });\n    }, [dispatch, id]);\n\n    const handleOpenDelete = React.useCallback(() => {\n        storeScreen(\"delete\");\n    }, []);\n\n    const handleShowLogs = React.useCallback(() => {\n        let display = \"display:Off,pause:!f,value:0\";\n        let stopDate = \"now\";\n        if (!stop_date) {\n            display = \"display:'5 seconds',pause:!f,section:1,value:5000\";\n        } else {\n            const _stopDate = new Date(stop_date);\n            _stopDate.setSeconds(_stopDate.getSeconds() + 1);\n            _stopDate.setMilliseconds(0);\n            stopDate = \"'\" + _stopDate.toISOString() + \"'\";\n        }\n\n        const startDate = new Date(start_date);\n        startDate.setMilliseconds(0);\n        const url = [\n            \"/kibana/app/kibana#/dashboard/default_dashboard?_g=(refreshInterval:(\",\n            display,\n            \"),time:(from:'\",\n            startDate.toISOString(),\n            \"',mode:absolute,to:\",\n            stopDate,\n            \"))&_a=(description:'',filters:!(),fullScreenMode:!f,options:(darkTheme:!f,useMargins:!f),\",\n            \"panels:!((gridData:(h:3,i:'2',w:6,x:6,y:0),id:vertical_bar,panelIndex:'2',\",\n            \"type:visualization,version:'6.2.4'),(columns:!(_source),gridData:(h:8,i:'6',w:12,x:0,y:3),\",\n            \"id:log_search,panelIndex:'6',sort:!('@timestamp',desc),type:search,version:'6.2.4'),\",\n            \"(gridData:(h:3,i:'7',w:6,x:0,y:0),id:pie,panelIndex:'7',type:visualization,version:'6.2.4')),\",\n            \"query:(language:lucene,query:'owner_scenario_instance_id:\",\n            owner,\n            \"'),timeRestore:!f,title:openbach_dashboard,uiState:(),viewMode:view)\",\n        ];\n        downloadURL(url.join(\"\"));\n        onClose();\n    }, [owner, start_date, stop_date, onClose]);\n\n    const handleShowStatistics = React.useCallback(() => {\n        const {grouped, statistics} = chronografData;\n        if (statistics.length > 0) {\n            const promise = dispatch(createChronografDashboard({instance, grouped, statistics}));\n            promise.unwrap().then(({id}) => {\n                downloadURL(\"/chronograf/sources/0/dashboards/\" + id);\n                onClose();\n            }).catch((error: Error) => {\n                storeChronografData({grouped, statistics: []});\n                storeChronografError(error.message);\n            });\n        } else {\n            downloadURL(\"/chronograf/\");\n            onClose();\n        }\n    }, [instance, chronografData, onClose, dispatch]);\n\n    const handleStopInstance = React.useCallback(() => {\n        dispatch(stopScenarioInstance({instance: id}));\n    }, [id, dispatch]);\n\n    const handleDeleteInstance = React.useCallback(() => {\n        dispatch(deleteScenarioInstance({instance: id}));\n        onClose();\n    }, [id, onClose, dispatch]);\n\n    const handleExportInstance = React.useCallback(() => {\n        const files = exported.filter((row) => row[0]).map(\n            (row) => encodeURIComponent(row[1]) + \"=\" + encodeURIComponent(row[2])\n        ).join(\"&\");\n        const url = \"/openbach/scenario_instance/\" + id + \"/\";\n        downloadURL(files ? url + \"archive?\" + files : \"csv\");\n        onClose();\n    }, [id, exported, onClose]);\n\n    const body = React.useMemo(() => {\n        switch (screen) {\n            case \"stats\":\n                return (\n                    <DialogStatistics\n                        onChange={storeChronografData}\n                        instance={instance}\n                        project={project_name}\n                        error={chronografError}\n                    />\n                );\n            case \"export\":\n                return <DialogExport onChange={storeExported} files={files} />;\n            case \"delete\":\n                return (\n                    <React.Fragment>\n                        <DialogContentText>\n                            The informations of this scenario instance will be\n                            removed from the database. You will not be able to\n                            recover them.\n                        </DialogContentText>\n                        <DialogContentText>\n                            Proceed?\n                        </DialogContentText>\n                    </React.Fragment>\n                );\n            default:\n                const elapsed = formatScenarioDuration(instance);\n                return (\n                    <List>\n                        <ListItem\n                            primary={instance.scenario_name}\n                            secondary={elapsed}\n                            rightIcon={<ScenarioInstanceStatusIcon status={instance.status} />}\n                            initiallyOpen\n                            inset\n                            nestedItems={<DialogItem instance={instance} />}\n                        />\n                    </List>\n                );\n        }\n    }, [screen, instance, project_name, chronografError, files]);\n\n    const actions = React.useMemo(() => {\n        switch (screen) {\n            case \"stats\":\n                return [{label: \"Show statistics\", action: handleShowStatistics}];\n            case \"export\":\n                return [{label: \"Download\", action: handleExportInstance}];\n            case \"delete\":\n                return [{label: \"Yes\", action: handleDeleteInstance}];\n            default:\n                const actions = [\n                    {label: \"Show logs\", action: handleShowLogs},\n                    {label: \"Show statistics\", action: handleOpenStatistics},\n                ];\n\n                if (status === \"Running\") {\n                    actions.splice(0, 0, {label: \"Stop Instance\", action: handleStopInstance});\n                } else if (status !== \"Scheduling\") {\n                    actions.splice(\n                        0, 0,\n                        {label: \"Delete\", action: handleOpenDelete},\n                        {label: \"Export to CSV\", action: handleOpenExport},\n                    );\n                }\n                return actions;\n        }\n    }, [\n        screen, status,\n        handleDeleteInstance, handleExportInstance, handleStopInstance,\n        handleOpenDelete, handleOpenExport, handleOpenStatistics,\n        handleShowLogs, handleShowStatistics,\n    ]);\n\n    return (\n        <Dialog\n            open\n            title={scenario_name}\n            cancel={{label: screen === \"delete\" ? \"No\" : screen == null ? \"OK\" : \"Cancel\", action: onClose}}\n            actions={actions}\n        >\n            <DialogContent>\n                {body}\n            </DialogContent>\n        </Dialog>\n    );\n};\n\n\ninterface Props {\n    instance: IScenarioInstance;\n    onClose: () => void;\n}\n\n\ninterface ChronografQuery {\n    grouped: boolean;\n    statistics: IChronografStatistic[];\n}\n\n\nexport default ScenarioInstanceDialog;\n","import React from 'react';\n\nimport Button from '@mui/material/Button';\nimport Checkbox from '@mui/material/Checkbox';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogContentText from '@mui/material/DialogContentText';\nimport List from '@mui/material/List';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemButton from '@mui/material/ListItemButton';\nimport ListItemIcon from '@mui/material/ListItemIcon';\nimport ListItemText from '@mui/material/ListItemText';\n\nimport DeleteIcon from '../common/DeleteIcon';\nimport Dialog from '../common/ActionDialog';\nimport ScenarioInstance from './ScenarioInstancesListItem';\nimport ScenarioInstanceDialog from './ScenarioInstanceDialog';\n\nimport {getScenariosInstances, getScenarioInstances, deleteScenarioInstance} from '../../api/scenarios';\nimport {useDispatch, useSelector} from '../../redux';\nimport type {IScenarioInstance} from '../../utils/interfaces';\n\n\nconst ScenarioInstancesList: React.FC<Props> = (props) => {\n    const {project, scenario} = props;\n    const instances = useSelector((state) => scenario\n        ? state.project.currentScenarioInstances\n        : state.project.scenarioInstances);\n    const hasMoreInstances = useSelector((state) => scenario\n        ? state.project.moreCurrentInstances\n        : state.project.moreInstances);\n    const dispatch = useDispatch();\n    const [selectedInstance, storeSelectedInstance] = React.useState<number>();\n    const [checked, storeChecked] = React.useState<{[id: number]: boolean;}>({});\n    const [remove, storeRemove] = React.useState<number[]>([]);\n\n    const handleOpenRemove = React.useCallback(() => {\n        const remove = instances.filter(({status, scenario_instance_id}: IScenarioInstance) => (\n            status !== \"Scheduling\" && status !== \"Running\" && checked[scenario_instance_id]\n        ));\n        storeRemove(remove.map(({scenario_instance_id}: IScenarioInstance) => scenario_instance_id));\n    }, [instances, checked]);\n\n    const handleCloseRemove = React.useCallback(() => {\n        storeRemove([]);\n    }, []);\n\n    const handleRemove = React.useCallback(() => {\n        remove.forEach((instance: number) => dispatch(deleteScenarioInstance({instance})));\n        handleCloseRemove();\n    }, [remove, handleCloseRemove, dispatch]);\n\n    const handleCheckInstance = React.useCallback((id: number, checked: boolean) => {\n        storeChecked((c) => ({...c, [id]: checked}));\n    }, []);\n\n    const handleCheckInstances = React.useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n        const {checked} = event.target;\n        storeChecked((c) => Object.fromEntries(Object.keys(c).map((k) => [k, checked])));\n    }, []);\n\n    const handleSelectInstance = React.useCallback((instanceId: number) => {\n        storeSelectedInstance(instanceId);\n    }, []);\n\n    const handleClearInstance = React.useCallback(() => {\n        storeSelectedInstance(undefined);\n    }, []);\n\n    const loadMoreInstances = React.useCallback(() => {\n        if (hasMoreInstances) {\n            const promise = scenario\n                            ? dispatch(getScenarioInstances({project, scenario}))\n                            : dispatch(getScenariosInstances({project}));\n            promise.unwrap().then((payload) => {\n                const updates = payload.map((s: IScenarioInstance) => (\n                    [s.scenario_instance_id, false]\n                ));\n                storeChecked((c) => ({...c, ...Object.fromEntries(updates)}));\n            });\n            return promise;\n        }\n    }, [project, scenario, hasMoreInstances, dispatch]);\n\n    React.useEffect(() => {\n        if (!instances.length) {\n            const promise = loadMoreInstances();\n            if (promise) {\n                return () => {promise.abort();};\n            }\n        }\n    }, [instances, loadMoreInstances]);\n\n    const amountChecked = Object.values(checked).reduce(({t, f}, value) => value ? {t: t + 1, f} : {f: f + 1, t}, {t: 0, f: 0})\n    const indeterminate = amountChecked.t !== 0 && amountChecked.f !== 0;\n\n    const scenarioInstance = instances.find((instance: IScenarioInstance) => instance.scenario_instance_id === selectedInstance);\n\n    return (\n        <React.Fragment>\n            <List>\n                <ListItem disablePadding secondaryAction={\n                    <Checkbox\n                        edge=\"end\"\n                        disableRipple\n                        checked={!indeterminate && amountChecked.t !== 0} \n                        indeterminate={indeterminate}\n                        onChange={handleCheckInstances}\n                    />\n                }>\n                    <ListItemButton onClick={handleOpenRemove}>\n                        <ListItemIcon>\n                            <DeleteIcon title=\"Delete Selected Instances\" />\n                        </ListItemIcon>\n                        <ListItemText primary=\"Delete Selected Instances\" />\n                    </ListItemButton>\n                </ListItem>\n                {instances.map((instance: IScenarioInstance) => (\n                    <ScenarioInstance\n                        key={instance.scenario_instance_id}\n                        instance={instance}\n                        checked={Boolean(checked[instance.scenario_instance_id])}\n                        onSelect={handleSelectInstance}\n                        onCheck={handleCheckInstance}\n                    />\n                ))}\n            </List>\n            <Button variant=\"contained\" color=\"secondary\" onClick={loadMoreInstances} sx={{mb: 2}}>\n                Load More\n            </Button>\n            {scenarioInstance && <ScenarioInstanceDialog instance={scenarioInstance} onClose={handleClearInstance} />}\n            {remove.length > 0 && <Dialog\n                open\n                title=\"Delete Scenario Instances\"\n                cancel={{label: \"No\", action: handleCloseRemove}}\n                actions={[{label: \"Yes\", action: handleRemove}]}\n            >\n                <DialogContent>\n                    <DialogContentText>\n                        The informations of {remove.length} scenario\n                        instance{remove.length > 1 ? \"s\" : \"\"} will be\n                        removed from the database. You will not be able\n                        to recover them.\n                    </DialogContentText>\n                    <DialogContentText>\n                        Proceed?\n                    </DialogContentText>\n                </DialogContent>\n            </Dialog>}\n        </React.Fragment>\n    );\n};\n\n\ninterface Props {\n    project: string;\n    scenario?: string;\n}\n\n\nexport default ScenarioInstancesList;\n","import React from 'react';\n\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogContentText from '@mui/material/DialogContentText';\nimport TextField from '@mui/material/TextField';\n\nimport Dialog from '../common/ActionDialog';\n\nimport {launchScenario} from '../../api/scenarios';\nimport {useDispatch} from '../../redux';\n\n\nconst ScenarioLaunchDialog: React.FC<Props> = (props) => {\n    const {project, scenario, arguments: args, onClose} = props;\n    const dispatch = useDispatch();\n    const [parameters, storeParameters] = React.useState<{[name: string]: string;}>(Object.fromEntries(args.map((name: string) => [name, \"\"])));\n\n    const handleChange = React.useCallback((key: string) => (event: React.ChangeEvent<HTMLInputElement>) => {\n        storeParameters((p) => ({...p, [key]: event.target.value}));\n    }, []);\n\n    const handleLaunch = React.useCallback((event: React.FormEvent) => {\n        dispatch(launchScenario({project, scenario, args: parameters}));\n        onClose();\n    }, [project, scenario, parameters, onClose, dispatch]);\n\n    return (\n        <Dialog\n            open\n            title={`Launch scenario ${scenario}`}\n            cancel={{label: \"Cancel\", action: onClose}}\n            actions={[{label: \"Launch\", action: \"submit\"}]}\n            onSubmit={handleLaunch}\n        >\n            <DialogContent>\n                {args.length > 0 && <DialogContentText>\n                    Please fill in the arguments of the\n                    scenario before proceeding:\n                </DialogContentText>}\n                {args.map((name: string) => (\n                    <TextField\n                        key={name}\n                        required\n                        margin=\"dense\"\n                        variant=\"standard\"\n                        label={name}\n                        value={parameters[name]}\n                        onChange={handleChange(name)}\n                        fullWidth\n                    />\n                ))}\n                <DialogContentText mt={args.length ? 3 : 0}>\n                    Launch the Scenario!\n                </DialogContentText>\n            </DialogContent>\n        </Dialog>\n    );\n};\n\n\ninterface Props {\n    project: string;\n    scenario: string;\n    arguments: string[];\n    onClose: () => void;\n}\n\n\nexport default ScenarioLaunchDialog;\n","import React from 'react';\n\nimport Button from '@mui/material/Button';\n\nimport DownloadIcon from './DownloadIcon';\n\nimport {downloadURL} from '../../api/base';\nimport type {Theme} from '@mui/material/styles';\nimport type {SxProps} from '@mui/system';\n\n\nconst DownloadButton: React.FC<Props> = (props) => {\n    const {route, filename, label, disabled, sx} = props;\n\n    const handleClick = React.useCallback(() => {\n        downloadURL(route, filename);\n    }, [route, filename])\n\n    return (\n        <Button\n            variant=\"contained\"\n            color=\"secondary\"\n            disabled={disabled}\n            onClick={handleClick}\n            startIcon={<DownloadIcon />}\n            sx={sx}\n        >\n            Download {label}\n        </Button>\n    );\n};\n\n\ninterface Props {\n    route: string;\n    filename: string;\n    label?: string;\n    disabled?: boolean;\n    sx?: SxProps<Theme>;\n}\n\n\nexport default DownloadButton;\n","import React from 'react';\n\nimport Button from '@mui/material/Button';\nimport DialogContent from '@mui/material/DialogContent';\nimport TextField from '@mui/material/TextField';\n\nimport Dialog from '../common/ActionDialog';\n\nimport type {Theme} from '@mui/material/styles';\nimport type {SxProps} from '@mui/system';\n\n\nconst JsonEditor: React.FC<Props> = (props) => {\n    const {initial, onUpdate, label, disabled, sx} = props;\n    const [open, storeOpen] = React.useState<boolean>(false);\n    const [data, storeData] = React.useState<string>(\"\");\n\n    const handleOpen = React.useCallback(() => {\n        storeOpen(true);\n    }, [])\n\n    const handleClose = React.useCallback(() => {\n        storeOpen(false);\n    }, [])\n\n    const handleSubmit = React.useCallback(() => {\n        onUpdate(data);\n        handleClose();\n    }, [data, onUpdate, handleClose]);\n\n    const handleDataChange = React.useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n        storeData(event.target.value);\n    }, []);\n\n    React.useEffect(() => {\n        storeData(JSON.stringify(initial, null, 4));\n    }, [initial]);\n\n    return (\n        <React.Fragment>\n            <Button\n                variant=\"contained\"\n                color=\"secondary\"\n                disabled={disabled}\n                onClick={handleOpen}\n                sx={sx}\n            >\n                Edit {label}\n            </Button>\n            <Dialog\n                title=\"JSON Editor\"\n                modal\n                open={open}\n                onSubmit={handleSubmit}\n                cancel={{label: \"Cancel\", action: handleClose}}\n                actions={[{label: \"Submit\", action: \"submit\"}]}\n            >\n                <DialogContent sx={{width: 550}} dividers>\n                    <TextField\n                        margin=\"dense\"\n                        variant=\"standard\"\n                        label=\"Content\"\n                        value={data}\n                        onChange={handleDataChange}\n                        fullWidth\n                        multiline\n                        rows={25}\n                    />\n                </DialogContent>\n            </Dialog>\n        </React.Fragment>\n    );\n};\n\n\ninterface Props {\n    label: string;\n    initial: object;\n    onUpdate: (json: string) => void;\n    disabled?: boolean;\n    sx?: SxProps<Theme>;\n}\n\n\nexport default JsonEditor;\n","import moment from 'moment';\n\nimport {\n    IScenarioInstance,\n    IOpenbachFunctionInstance,\n    IOpenbachFunctionInstanceStartJobInstance,\n    IOpenbachFunctionInstanceStartScenarioInstance,\n    IOpenbachFunctionInstanceStopJobInstances,\n    IOpenbachFunctionInstanceStopScenarioInstance,\n} from './interfaces';\n\n\nconst DATE_FORMAT = \"YYYY-MM-DD HH:mm:ss\";\n\n\nexport const isStartJobInstance = (instance: IOpenbachFunctionInstance): instance is IOpenbachFunctionInstanceStartJobInstance => {\n    return instance.hasOwnProperty(\"start_job_instance\");\n};\n\n\nexport const isStartScenarioInstance = (instance: IOpenbachFunctionInstance): instance is IOpenbachFunctionInstanceStartScenarioInstance => {\n    return instance.hasOwnProperty(\"start_scenario_instance\");\n};\n\n\nexport const isStopJobInstances = (instance: IOpenbachFunctionInstance): instance is IOpenbachFunctionInstanceStopJobInstances => {\n    return instance.hasOwnProperty(\"stop_job_instances\");\n};\n\n\nexport const isStopScenarioInstance = (instance: IOpenbachFunctionInstance): instance is IOpenbachFunctionInstanceStopScenarioInstance => {\n    return instance.hasOwnProperty(\"stop_scenario_instance\");\n};\n\n\nconst openbachFunctionKnownKeys: {[Property in keyof IOpenbachFunctionInstance]: null;} = {\n    id: null,\n    label: null,\n    launch_date: null,\n    status: null,\n    wait: null,\n};\n\n\nexport const extractOpenbachFunctionName = (openbachFunction: IOpenbachFunctionInstance): string | undefined => {\n    for (const name in openbachFunction) {\n        if (openbachFunction.hasOwnProperty(name) && !openbachFunctionKnownKeys.hasOwnProperty(name)) {\n            return name;\n        }\n    }\n};\n\n\nconst extractTime = (amount: number): string => {\n    const value = amount % 60;\n    return value > 9 ? String(value) : \"0\" + value;\n};\n\n\nexport const formatScenarioDuration = ({scenario_instance_id, start_date, stop_date}: IScenarioInstance): string => {\n    const startDate = moment(start_date);\n    const started = startDate.format(DATE_FORMAT);\n    const header = `(scenario instance id: ${scenario_instance_id})`;\n    if (!stop_date) {\n        return `${header} Ongoing [started ${started}]`;\n    }\n\n    const stopDate = moment(stop_date);\n    const stopped = stopDate.format(DATE_FORMAT);\n    const seconds = extractTime(stopDate.diff(startDate, \"seconds\"));\n    const minutes = extractTime(stopDate.diff(startDate, \"minutes\"));\n    const hours = stopDate.diff(startDate, \"hours\");\n    return `${header} ${started} --> ${stopped} [Duration of ${hours}:${minutes}:${seconds}]`;\n};\n\n\nexport const idToLabel = (id: number, functions: {id: number; label?: string;}[]): string => {\n    const found = functions.find((f: {id: number;}) => f.id === id);\n    return found?.label || String(id);\n};\n"],"names":["props","_props$instance","instance","status","scenario_instance_id","scenario_name","start_date","onSelect","checked","onCheck","dispatch","useDispatch","_React$useState","React","_React$useState2","_slicedToArray","verbose","storeVerbose","refresh","getScenarioInstance","handleClick","handleStop","event","preventDefault","stopPropagation","stopScenarioInstance","handleSelect","target","id","setInterval","clearInterval","_jsx","ListItem","disablePadding","secondaryAction","IconButton","edge","onClick","children","StopIcon","sx","color","red","Checkbox","disableRipple","onChange","undefined","_jsxs","ListItemButton","ListItemIcon","ScenarioInstanceIcon","ListItemText","primary","secondary","moment","format","titleFromLabel","title","_ref","label","concat","ScenarioInstanceDialogItem","args","arguments","openbach_functions","leftIcon","OpenbachFunctionIcon","function","nestedItems","map","_ref2","index","name","value","openbachFunction","isStartJobInstance","job","rightIcon","OpenbachFunctionStatusIcon","initiallyOpen","inset","entity","agent","JobInstanceStatusIcon","isStartScenarioInstance","scenario","formatScenarioDuration","ScenarioInstanceStatusIcon","isStopJobInstances","ids","stop_job_instances","openbach_function_ids","idToLabel","join","isStopScenarioInstance","stop_scenario_instance","openbach_function_id","obfName","extractOpenbachFunctionName","files","Object","entries","reduce","accumulator","jobName","counts","_ref3","_ref4","statName","count","rows","storeRows","handleSelectAll","selected","_ref5","_ref6","_ref7","i","_ref8","s","j","n","c","numSelected","total","row","TableContainer","Table","size","TableHead","TableRow","TableCell","padding","indeterminate","length","TableBody","_ref9","_ref10","hover","role","tabIndex","cursor","getStatisticsNames","asyncThunk","_asyncToGenerator","_regeneratorRuntime","mark","_callee","project","wrap","_context","prev","next","doFetch","abrupt","sent","stop","_x","_x2","apply","createChronografDashboard","_callee2","jobId","_context2","_x3","_x4","_callee3","statistics","grouped","targets","graphs","dashboard","_context3","slice","sort","a","b","unit","forEach","array","jobAgent","push","cells","graph","h","queries","query","valueOf","stop_date","add","source","text","type","w","x","y","owner_scenario_instance_id","_x5","_x6","getJobNames","jobs","_openbachFunction$job","error","storeStatistics","_React$useState3","_React$useState4","storeSelected","_React$useState5","_React$useState6","groupedTogether","storeGroupedTogether","handleGroupedTogetherChange","isSelected","stats","entry","handleSelectedChange","_objectSpread","_defineProperty","handleUnitChange","promise","unwrap","then","payload","catch","setMessage","message","abort","jobID","filter","Number","find","DialogContentText","List","TextField","margin","variant","width","FormGroup","FormControlLabel","control","onClose","project_name","owner","screen","storeScreen","storeFiles","exported","storeExported","_React$useState7","_React$useState8","chronografData","storeChronografData","_React$useState9","_React$useState10","chronografError","storeChronografError","handleOpenStatistics","handleOpenExport","getScenarioInstanceFilesCount","keys","downloadURL","handleOpenDelete","handleShowLogs","display","stopDate","_stopDate","Date","setSeconds","getSeconds","setMilliseconds","toISOString","startDate","url","handleShowStatistics","handleStopInstance","handleDeleteInstance","deleteScenarioInstance","handleExportInstance","encodeURIComponent","body","DialogStatistics","DialogExport","elapsed","DialogItem","actions","action","splice","Dialog","open","cancel","DialogContent","instances","useSelector","state","currentScenarioInstances","scenarioInstances","hasMoreInstances","moreCurrentInstances","moreInstances","selectedInstance","storeSelectedInstance","storeChecked","remove","storeRemove","handleOpenRemove","handleCloseRemove","handleRemove","handleCheckInstance","handleCheckInstances","fromEntries","k","handleSelectInstance","instanceId","handleClearInstance","loadMoreInstances","getScenarioInstances","getScenariosInstances","updates","amountChecked","values","t","f","scenarioInstance","DeleteIcon","ScenarioInstance","Boolean","Button","mb","ScenarioInstanceDialog","parameters","storeParameters","handleChange","key","p","handleLaunch","launchScenario","onSubmit","required","fullWidth","mt","route","filename","disabled","startIcon","DownloadIcon","initial","onUpdate","storeOpen","data","storeData","handleOpen","handleClose","handleSubmit","handleDataChange","JSON","stringify","modal","dividers","multiline","DATE_FORMAT","hasOwnProperty","openbachFunctionKnownKeys","launch_date","wait","extractTime","amount","String","started","header","stopped","seconds","diff","minutes","hours","functions","found"],"sourceRoot":""}