{"version":3,"file":"static/js/553.11883db8.chunk.js","mappings":"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","sources":["components/Users/Settings.tsx"],"sourcesContent":["import React from 'react';\nimport {useForm, Controller} from 'react-hook-form';\n\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport Divider from '@mui/material/Divider';\nimport TextField from '@mui/material/TextField';\n\nimport {grey, red} from '@mui/material/colors';\n\nimport {updateUser} from '../../api/login';\nimport {useSelector, useDispatch} from '../../redux';\nimport {setMessage, setTitle} from '../../redux/message';\nimport type {FieldErrors} from 'react-hook-form';\n\n\nconst fieldsEqual = (originalValue?: string, fieldValue?: string): boolean => {\n    return !originalValue && !fieldValue ? true : originalValue === fieldValue;\n};\n\n\nconst Settings: React.FC<Props> = (props) => {\n    const {username, first_name, last_name, email, is_user} = useSelector((state) => state.login);\n    const dispatch = useDispatch();\n    const {control, handleSubmit, reset, formState: {isDirty}} = useForm<FormData>();\n\n    const onSubmit = React.useCallback((data: FormData) => {\n        if (username) {\n            dispatch(updateUser({\n                login: username,\n                password: data.password || undefined,\n                first_name: data.firstName,\n                last_name: data.lastName,\n                email: data.email,\n            }));\n            reset({password: \"\", passwordVerif: \"\"});\n        }\n    }, [username, reset, dispatch]);\n\n    const onError = React.useCallback((error: FieldErrors<FormData>) => {\n        const errors: string[] = [];\n        const passwordError = error?.password?.message;\n        if (passwordError) {\n            errors.push(passwordError);\n        }\n        const firstNameError = error?.firstName?.message;\n        if (firstNameError) {\n            errors.push(\"First Name \" + firstNameError);\n        }\n        const lastNameError = error?.lastName?.message;\n        if (lastNameError) {\n            errors.push(\"Last Name \" + lastNameError);\n        }\n        if (errors.length) {\n            dispatch(setMessage(errors.join(\" / \")));\n        }\n    }, [dispatch]);\n\n    React.useEffect(() => {\n        dispatch(setTitle(\"Settings\"));\n    }, [dispatch]);\n\n    const name = [first_name, last_name].join(\" \").trim();\n    const title = name ? `User settings for ${username} (${name})` : \"User settings for \" + username;\n\n    return (\n        <React.Fragment>\n            <h1>{title}</h1>\n            {!is_user && <Box component=\"p\" color={red[500]}>\n                Your account is not activated yet, please contact your administrator\n            </Box>}\n            <form onSubmit={handleSubmit(onSubmit, onError)}>\n                <Divider>Profile</Divider>\n                <Controller\n                    name=\"firstName\"\n                    control={control}\n                    rules={{required: false, maxLength: {value: 30, message: \"Length is limited to 30 characters\"}}}\n                    defaultValue={first_name || \"\"}\n                    render={({field: {onBlur, onChange, value, ref}, fieldState: {error}}) => (\n                        <TextField\n                            fullWidth\n                            variant=\"standard\"\n                            label=\"First Name\"\n                            onChange={onChange}\n                            onBlur={onBlur}\n                            value={value}\n                            inputRef={ref}\n                            error={!!error?.message}\n                            helperText={error?.message}\n                        />\n                    )}\n                />\n                <Controller\n                    name=\"lastName\"\n                    control={control}\n                    rules={{required: false, maxLength: {value: 30, message: \"Length is limited to 30 characters\"}}}\n                    defaultValue={last_name || \"\"}\n                    render={({field: {onBlur, onChange, value, ref}, fieldState: {error}}) => (\n                        <TextField\n                            fullWidth\n                            variant=\"standard\"\n                            label=\"Last Name\"\n                            onChange={onChange}\n                            onBlur={onBlur}\n                            value={value}\n                            inputRef={ref}\n                            error={!!error?.message}\n                            helperText={error?.message}\n                        />\n                    )}\n                />\n                <Controller\n                    name=\"email\"\n                    control={control}\n                    rules={{required: false}}\n                    defaultValue={email || \"\"}\n                    render={({field: {onBlur, onChange, value, ref}}) => (\n                        <TextField\n                            fullWidth\n                            variant=\"standard\"\n                            label=\"Email\"\n                            onChange={onChange}\n                            onBlur={onBlur}\n                            value={value}\n                            inputRef={ref}\n                        />\n                    )}\n                />\n                <Divider sx={{mt: 5}}>Change Password</Divider>\n                <Box component=\"p\" color={grey[500]}>\n                    Fill in the following fields only if you want to change your password\n                </Box>\n                <Controller\n                    name=\"password\"\n                    control={control}\n                    rules={{required: false, validate: (_, values) => fieldsEqual(values.password, values.passwordVerif) || \"The two passwords do not match\"}}\n                    defaultValue=\"\"\n                    render={({field: {onBlur, onChange, value, ref}, fieldState: {error}}) => (\n                        <TextField\n                            fullWidth\n                            variant=\"standard\"\n                            type=\"password\"\n                            label=\"Password\"\n                            onChange={onChange}\n                            onBlur={onBlur}\n                            value={value}\n                            inputRef={ref}\n                            error={!!error?.message}\n                            helperText={error?.message}\n                        />\n                    )}\n                />\n                <Controller\n                    name=\"passwordVerif\"\n                    control={control}\n                    rules={{required: false, validate: (_, values) => fieldsEqual(values.password, values.passwordVerif) || \"The two passwords do not match\"}}\n                    defaultValue=\"\"\n                    render={({field: {onBlur, onChange, value, ref}, fieldState: {error}}) => (\n                        <TextField\n                            fullWidth\n                            variant=\"standard\"\n                            type=\"password\"\n                            label=\"Confirm Password\"\n                            onChange={onChange}\n                            onBlur={onBlur}\n                            value={value}\n                            inputRef={ref}\n                            error={!!error?.message}\n                            helperText={error?.message}\n                        />\n                    )}\n                />\n                <Button variant=\"contained\" color=\"secondary\" disabled={!isDirty} type=\"submit\" sx={{mt: 5}}>\n                    Modify User Settings\n                </Button>\n            </form>\n        </React.Fragment>\n    );\n};\n\n\ninterface Props {\n}\n\n\ninterface FormData {\n    password?: string;\n    passwordVerif?: string;\n    email?: string;\n    firstName?: string;\n    lastName?: string;\n}\n\n\nexport default Settings;\n"],"names":["fieldsEqual","originalValue","fieldValue","props","_useSelector","useSelector","state","login","username","first_name","last_name","email","is_user","dispatch","useDispatch","_useForm","useForm","control","handleSubmit","reset","isDirty","formState","onSubmit","React","data","updateUser","password","undefined","firstName","lastName","passwordVerif","onError","error","_error$password","_error$firstName","_error$lastName","errors","passwordError","message","push","firstNameError","lastNameError","length","setMessage","join","setTitle","name","trim","title","concat","_jsxs","children","_jsx","Box","component","color","red","Divider","Controller","rules","required","maxLength","value","defaultValue","render","_ref","_ref$field","field","onBlur","onChange","ref","fieldState","TextField","fullWidth","variant","label","inputRef","helperText","_ref2","_ref2$field","_ref3","_ref3$field","sx","mt","grey","validate","_","values","_ref4","_ref4$field","type","_ref5","_ref5$field","Button","disabled"],"sourceRoot":""}