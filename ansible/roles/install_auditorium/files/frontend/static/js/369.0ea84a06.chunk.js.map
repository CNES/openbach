{"version":3,"file":"static/js/369.0ea84a06.chunk.js","mappings":"2bA+CA,EApCqE,SAACA,GAClE,IAAOC,EAA6CD,EAA7CC,MAAOC,EAAsCF,EAAtCE,SAAUC,EAA4BH,EAA5BG,MAAOC,EAAqBJ,EAArBI,QAASC,EAAYL,EAAZK,SAClCC,GAASC,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAMC,MAAMC,OAAO,IAEzD,OACIC,EAAAA,EAAAA,MAACC,EAAAA,EAAI,CAACC,GAAI,CAACC,SAAU,YAAYT,SAAA,EAC7BU,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAACf,MAAOA,EAAOgB,UAAWf,EAAUW,GAAI,CAACK,OAAQ,OAAQC,gBAAiB,yBACrFJ,EAAAA,EAAAA,KAACK,EAAAA,EAAS,CACNC,UAAU,MACVC,IAAI,cACJC,MAAOpB,EACPe,OAAO,KACPL,GAAI,CAACW,UAAW,UAAWV,SAAU,WAAYW,MAAO,OAAQC,IAAK,EAAGC,MAAO,MAEnFZ,EAAAA,EAAAA,KAACa,EAAAA,EAAW,CAAAvB,SACPA,IAEJC,GAAqB,MAAXF,IAAmBW,EAAAA,EAAAA,KAACc,EAAAA,EAAW,CACtCC,gBAAc,EACdjB,GAAI,CAACkB,QAAS,OAAQC,cAAe,SAAUC,IAAK,GAAG5B,SAEtDD,MAIjB,E,UCnBMmB,EAAiC,sBA+HvC,EA5HmC,SAACvB,GAChC,IAAOkC,EAAWlC,EAAXkC,QACD5B,GAASC,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAMC,MAAMC,OAAO,IACnDyB,GAAS5B,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAM4B,SAASD,MAAM,IACrDE,GAAWC,EAAAA,EAAAA,MACjBC,EAA4CC,EAAAA,SAAuB,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA/DI,EAAaF,EAAA,GAAEG,EAAkBH,EAAA,GACxCI,EAA0DL,EAAAA,SAAuB,IAAGM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAA7EE,EAAoBD,EAAA,GAAEE,EAAyBF,EAAA,GACtDG,EAA8CT,EAAAA,SAAuB,IAAGU,GAAAR,EAAAA,EAAAA,GAAAO,EAAA,GAAjEE,EAAcD,EAAA,GAAEE,EAAmBF,EAAA,GAEpCG,EAAmBb,EAAAA,aAAkB,SAACc,GACxCV,EAAmBU,EAAMC,OAAOC,MACpC,GAAG,IAEGC,EAA0BjB,EAAAA,aAAkB,SAACc,GAC/CN,EAA0BM,EAAMC,OAAOC,MAC3C,GAAG,IAEGE,EAAoBlB,EAAAA,aAAkB,SAACc,GACzC,IAAOE,EAASF,EAAMC,OAAfC,MACPJ,EAAoBI,GAAgB,GACxC,GAAG,IAEGG,EAAkBnB,EAAAA,aAAkB,WACjCG,IAILN,GAASuB,EAAAA,EAAAA,IAAU,CACf1B,QAAAA,EACA2B,KAAMlB,EACNmB,YAAaf,QAAwBgB,EACrCC,MAAa,OAAN7B,QAAM,IAANA,OAAM,EAANA,EAAQ8B,MAAK,SAACC,GAAS,OAAKA,EAAEC,UAAYhB,CAAc,OAEnEP,EAAmB,IACnBI,EAA0B,IAC1BI,EAAoB,IACxB,GAAG,CAAClB,EAASC,EAAQQ,EAAeI,EAAsBI,EAAgBd,IAEpE+B,EAAW5B,EAAAA,SAAc,kBAAOL,GAAU,IAAIkC,QAChD,SAACL,GAAa,OAAMA,EAAM9B,SAAW8B,EAAMI,WAAalC,CAAO,IACjEoC,KAAI,SAACN,GAAa,OAChBjD,EAAAA,EAAAA,KAACwD,EAAAA,EAAQ,CAAqBf,MAAOQ,EAAMG,QAAQ9D,SAAE2D,EAAMH,MAA5CG,EAAMG,QAAsD,GAC7E,GAAE,CAAChC,EAAQD,IAEPsC,EAAYhC,EAAAA,SAAc,kBAAOL,GAAU,IAAIkC,QACjD,SAACL,GAAa,OAAMA,EAAM9B,UAAY8B,EAAMI,QAAQ,IACtDE,KAAI,SAACN,GAAa,OAChBjD,EAAAA,EAAAA,KAACwD,EAAAA,EAAQ,CAAqBf,MAAOQ,EAAMG,QAAQ9D,SAAE2D,EAAMH,MAA5CG,EAAMG,QAAsD,GAC7E,GAAE,CAAChC,IAEL,OAAK7B,GAaDK,EAAAA,EAAAA,MAAC8D,EAAkB,CACfxE,MAAM,aACNC,SAAS,mCACTC,MAAOoB,EACPnB,SACIW,EAAAA,EAAAA,KAAC2D,EAAAA,EAAM,CACHC,QAAQ,YACRC,MAAM,YACNC,UAAWlC,EACXmC,QAASnB,EAAgBtD,SAC5B,eAGJA,SAAA,EAEDU,EAAAA,EAAAA,KAACgE,EAAAA,EAAS,CACNC,UAAQ,EACRC,OAAO,QACPN,QAAQ,WACRO,MAAM,cACN1B,MAAOb,EACPwC,SAAU9B,EACV+B,WAAS,KAEbrE,EAAAA,EAAAA,KAACgE,EAAAA,EAAS,CACNE,OAAO,QACPN,QAAQ,WACRO,MAAM,qBACN1B,MAAOT,EACPoC,SAAU1B,EACV2B,WAAS,EACTC,WAAS,EACTC,KAAM,KAEV3E,EAAAA,EAAAA,MAAC4E,EAAAA,EAAW,CAACH,WAAS,EAACvE,GAAI,CAAC2E,GAAI,GAAGnF,SAAA,EAC/BU,EAAAA,EAAAA,KAAC0E,EAAAA,EAAU,CAACC,GAAG,mBAAkBrF,SAAC,sBAClCM,EAAAA,EAAAA,MAACgF,EAAAA,EAAM,CACHX,UAAQ,EACRY,QAAQ,mBACRF,GAAG,oBACHR,MAAM,mBACN1B,MAAOL,EACPgC,SAAUzB,EAAkBrD,SAAA,EAE5BU,EAAAA,EAAAA,KAACwD,EAAAA,EAAQ,CAACf,MAAM,MAChBzC,EAAAA,EAAAA,KAACwD,EAAAA,EAAQ,CAAAlE,SAAC,6CACT+D,GACDrD,EAAAA,EAAAA,KAACwD,EAAAA,EAAQ,CAAAlE,SAAC,wBACTmE,YA3DTzD,EAAAA,EAAAA,KAAC0D,EAAkB,CACfxE,MAAM,SACNC,SAAS,kCACTC,MAAOoB,EAAMlB,SAChB,sBA4Db,ECvCA,EArFqC,SAACL,GAClC,IAAOkC,EAAuClC,EAAvCkC,QAAS2D,EAA8B7F,EAA9B6F,KAAM7B,EAAwBhE,EAAxBgE,MAAO8B,EAAiB9F,EAAjB8F,cACvB3D,GAAS5B,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAM4B,SAASD,MAAM,IAErDuB,EAAoBlB,EAAAA,aAAkB,SAACc,GACzC,IAAMa,EAAUb,EAAMC,OAAOC,MAC7BsC,EAAc3B,EAAgB,OAANhC,QAAM,IAANA,OAAM,EAANA,EAAQ8B,MAAK,SAACC,GAAS,OAAKA,EAAEC,UAAYA,CAAO,SAAIJ,EACjF,GAAG,CAAC5B,EAAQ2D,IAEN1B,EAAW5B,EAAAA,SAAc,kBAAOL,GAAU,IAAIkC,QAChD,SAACH,GAAS,OAAKA,EAAEE,WAAalC,KAAagC,EAAEhC,SAAWgC,EAAEC,WAAiB,OAALH,QAAK,IAALA,OAAK,EAALA,EAAOG,SAAQ,IACvFG,KAAI,SAACN,GAAa,OAChBjD,EAAAA,EAAAA,KAACwD,EAAAA,EAAQ,CAAqBf,MAAOQ,EAAMG,QAAQ9D,SAAE2D,EAAMH,MAA5CG,EAAMG,QAAsD,GAC7E,GAAE,CAAChC,EAAQD,EAAS8B,IAEhBQ,EAAYhC,EAAAA,SAAc,kBAAOL,GAAU,IAAIkC,QACjD,SAACH,GAAS,OAAMA,EAAEE,YAAcF,EAAEhC,SAAWgC,EAAEC,WAAiB,OAALH,QAAK,IAALA,OAAK,EAALA,EAAOG,SAAQ,IAC5EG,KAAI,SAACN,GAAa,OAChBjD,EAAAA,EAAAA,KAACwD,EAAAA,EAAQ,CAAqBf,MAAOQ,EAAMG,QAAQ9D,SAAE2D,EAAMH,MAA5CG,EAAMG,QAAsD,GAC7E,GAAE,CAAChC,EAAQ6B,IAEP+B,GACFpF,EAAAA,EAAAA,MAAC4E,EAAAA,EAAW,CAACH,WAAS,EAAA/E,SAAA,EAClBU,EAAAA,EAAAA,KAAC0E,EAAAA,EAAU,CAACC,GAAG,sBAAqBrF,SAAC,sBACrCM,EAAAA,EAAAA,MAACgF,EAAAA,EAAM,CACHC,QAAQ,sBACRF,GAAG,uBACHR,MAAM,mBACN1B,OAAY,OAALQ,QAAK,IAALA,OAAK,EAALA,EAAOG,UAAW,GACzBgB,SAAUzB,EAAkBrD,SAAA,EAE5BU,EAAAA,EAAAA,KAACwD,EAAAA,EAAQ,CAACf,MAAM,MAChBzC,EAAAA,EAAAA,KAACwD,EAAAA,EAAQ,CAAAlE,SAAC,6CACT+D,GACDrD,EAAAA,EAAAA,KAACwD,EAAAA,EAAQ,CAAAlE,SAAC,wBACTmE,QAKb,IAAKR,EACD,OAAO+B,EAGX,IAAMC,EAAoB,OAAN7D,QAAM,IAANA,OAAM,EAANA,EAAQ8B,MAAK,SAACC,GAAS,OAAKA,EAAEC,UAAYH,EAAMG,OAAO,IAErE8B,EAAsB,OAAXD,QAAW,IAAXA,OAAW,EAAXA,EAAaC,SACxBC,EAAe,OAARD,QAAQ,IAARA,GAAAA,EAAUE,eAAe,eAAsBF,EAAS,eAAeG,MAAM,SAASnC,MAC/F,SAACoC,GAAS,OAAKA,EAAEC,WAAW,IAAI,IADmB,GAGjDC,EAAiB,KAARL,EAAa,yBAA4BA,EACpD,eAAiBA,EAAIE,MAAM,OAAO,GAAK,MADmB,uBAIxDI,EAAoB,OAAXR,QAAW,IAAXA,OAAW,EAAXA,EAAaQ,OAE5B,OACI7F,EAAAA,EAAAA,MAAA,MAAAN,SAAA,EACIU,EAAAA,EAAAA,KAAA,MAAAV,SAAK0F,KACLpF,EAAAA,EAAAA,MAAA,MAAAN,SAAA,CAAI,8BAA0BU,EAAAA,EAAAA,KAAA,KAAAV,SAAI2D,EAAMG,cACxCxD,EAAAA,EAAAA,MAAA,MAAAN,SAAA,CAAI,eAAWU,EAAAA,EAAAA,KAAA,KAAAV,SAAI2D,EAAMyC,mBACzB9F,EAAAA,EAAAA,MAAA,MAAAN,SAAA,CAAI,mBAAiBwF,EAAKa,QACtB3F,EAAAA,EAAAA,KAAA,MAAAV,SACKwF,EAAKvB,KAAI,SAACqC,GAAS,OAAK5F,EAAAA,EAAAA,KAAA,MAAAV,SAAasG,GAAJA,EAAW,MAEjD,wBACJ5F,EAAAA,EAAAA,KAAA,MAAAV,SAAKkG,IACJC,GAAUA,EAAOE,OAAS,IAAK3F,EAAAA,EAAAA,KAAA,MAAAV,UAC5BU,EAAAA,EAAAA,KAAA,MAAAV,SACKmG,EAAOlC,KAAI,SAACsC,EAAGC,GAAa,OAAK9F,EAAAA,EAAAA,KAAA,MAAAV,SAAiBuG,EAAEE,KAAVD,EAAmB,UAKlF,E,4BCIA,EA3EoE,SAAC7G,GACjE,IAAO+G,EAA0B/G,EAA1B+G,QAASC,EAAiBhH,EAAjBgH,OAAQhD,EAAShE,EAATgE,MAClB3B,GAAWC,EAAAA,EAAAA,MACjBC,EAAkCC,EAAAA,SAAyB,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAvD0E,EAAQxE,EAAA,GAAEyE,EAAazE,EAAA,GAExB0E,EAAe3E,EAAAA,aAAkB,SAACc,GACpC,IAAOE,EAASF,EAAMC,OAAfC,MACP0D,EAA+B,kBAAV1D,EAAqB,GAAKA,EACnD,GAAG,IAEG4D,EAAe5E,EAAAA,aAAkB,WACnC,GAAIyE,EAASP,OAAQ,CACjB,OAAQM,GACJ,IAAK,UACD3E,GAASgF,EAAAA,EAAAA,IAAgB,CAACC,SAAUL,EAAU9E,OAAQ,CAAC6B,MACvD,MACJ,IAAK,YACD3B,GAASkF,EAAAA,EAAAA,IAAkB,CAACD,SAAUL,EAAU9E,OAAQ,CAAC6B,MACzD,MACJ,QAEI,YADAkD,EAAc,IAGtBD,EAASO,SAAQ,SAACC,GAAiBpF,GAASqF,EAAAA,EAAAA,IAAa,CAACD,IAAAA,EAAKzD,MAAAA,EAAOgD,OAAAA,IAAU,IAChFW,YAAW,WACPC,OAAOC,SAAS,CAACnG,IAAKoG,SAASC,KAAKC,aAAcC,KAAM,EAAGC,SAAU,UACzE,GAAG,GACP,CACAhB,EAAc,GAClB,GAAG,CAACD,EAAUD,EAAQhD,EAAO3B,IAM7B,OAJAG,EAAAA,WAAgB,WACZ0E,EAAc,GAClB,GAAG,CAACH,KAGApG,EAAAA,EAAAA,MAACwH,EAAAA,EAAG,CAACpG,QAAQ,OAAOqG,WAAW,SAAS3G,MAAM,OAAOQ,IAAK,EAAE5B,SAAA,EACxDM,EAAAA,EAAAA,MAAC+D,EAAAA,EAAM,CACHC,QAAQ,YACRC,MAAM,YACNE,QAASsC,EAAa/G,SAAA,CAErB2G,EAAO,YAEZjG,EAAAA,EAAAA,KAACwE,EAAAA,EAAW,CAAC1E,GAAI,CAACwH,SAAU,GAAGhI,UAC3BU,EAAAA,EAAAA,KAAC4E,EAAAA,EAAM,CACH2C,UAAQ,EACRlD,WAAS,EACT5B,MAAOyD,EACP9B,SAAUgC,EACVoB,YAAa,SAACC,GAAM,OAChBzH,EAAAA,EAAAA,KAACoH,EAAAA,EAAG,CAACtH,GAAI,CAACkB,QAAS,OAAQ0G,SAAU,OAAQxG,IAAK,IAAK5B,SAClDmI,EAAOlE,KAAI,SAACd,GAAK,OACdzC,EAAAA,EAAAA,KAAC2H,EAAAA,EAAI,CAAaxD,MAAO1B,GAAdA,EAAuB,KAEpC,EACRnD,SAED0G,EAAQzC,KAAI,SAACd,GAAK,OACfzC,EAAAA,EAAAA,KAACwD,EAAAA,EAAQ,CAAaf,MAAOA,EAAMnD,SAAEmD,GAAtBA,EAAuC,UAM9E,E,UCuBA,EAtFoC,SAACxD,GACjC,IAAOkC,EAAmElC,EAAnEkC,QAAOyG,EAA4D3I,EAA1D4I,OAAS/E,EAAI8E,EAAJ9E,KAAMC,EAAW6E,EAAX7E,YAAaE,EAAK2E,EAAL3E,MAAO6E,EAAQF,EAARE,SAAWC,EAAY9I,EAAZ8I,SACxDjD,GAAOtF,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAM4B,SAASyD,IAAI,IACjDxD,GAAWC,EAAAA,EAAAA,MACjBC,EAA4CC,EAAAA,SAAyB,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAjEwG,EAAatG,EAAA,GAAEuG,EAAkBvG,EAAA,GAElCwG,EAAqBzG,EAAAA,aAAkB,WACzCH,GAAS6G,EAAAA,EAAAA,IAAa,CAAChH,QAAAA,EAAS2B,KAAAA,KAChCiF,GACJ,GAAG,CAAC5G,EAAS2B,EAAMxB,EAAUyG,IAEvBpF,EAAoBlB,EAAAA,aAAkB,SAACwB,GACzC3B,GAAS8G,EAAAA,EAAAA,IAAkB,CAACjH,QAAAA,EAAS2B,KAAAA,EAAMC,YAAAA,EAAaE,MAAAA,EAAO6E,SAAAA,IACnE,GAAG,CAAC3G,EAAS2B,EAAMC,EAAa+E,EAAUxG,IAEpC+G,EAAiB5G,EAAAA,SAAc,WACjC,OAAQqG,GAAY,IAAIvE,KAAI,SAAC+E,GAAiB,OAC1C1I,EAAAA,EAAAA,MAAA,MAAAN,SAAA,CAA6BgJ,EAAQC,UAAU,KAAGD,EAAQE,GAAG,aAAWF,EAAQxF,KAAK,MAA5EwF,EAAQC,UAA0E,GAEnG,GAAG,CAACT,IAEJrG,EAAAA,WAAgB,WACZ,GAAIwB,EAAO,CACP,IAAOG,EAAWH,EAAXG,QACDqF,EAAUnH,GAASoH,EAAAA,EAAAA,IAAQ,CAACtF,QAAAA,KAElC,OADAqF,EAAQE,SAASC,MAAK,SAACC,GAAaZ,EAAmBY,EAAS,IACzD,WAAOJ,EAAQK,OAAQ,CAClC,CACJ,GAAG,CAAC7F,EAAO3B,IAEX,IAAM2E,GACFjG,EAAAA,EAAAA,KAAC2D,EAAAA,EAAM,CACHC,QAAQ,YACRC,MAAM,YACNE,QAASmE,EAAmB5I,SAC/B,kBAKL,OACIU,EAAAA,EAAAA,KAAC0D,EAAkB,CACfxE,MAAM,SACNC,SAAS,kCACTC,MA/C2B,qBAgD3BC,QAAS4D,GACLrD,EAAAA,EAAAA,MAAC6B,EAAAA,SAAc,CAAAnC,SAAA,EACXU,EAAAA,EAAAA,KAAC+I,EAAiB,CACd9F,MAAOA,EAAMG,QACb6C,OAAO,UACPD,SAAUlB,GAAQ,IAAIxB,QAAO,SAACoD,GAAS,OAAMsB,EAAcgB,SAAStC,EAAIuC,QAAQnG,KAAK,IAAES,KAAI,SAACmD,GAAS,OAAKA,EAAIuC,QAAQnG,IAAI,OAE9H9C,EAAAA,EAAAA,KAAC+I,EAAiB,CACd9F,MAAOA,EAAMG,QACb6C,OAAO,YACPD,QAASgC,IAEZ/B,KAELA,EAAO3G,UAEXM,EAAAA,EAAAA,MAAA,MAAAN,SAAA,EACIM,EAAAA,EAAAA,MAAA,MAAAN,SAAA,CAAI,iBAAaU,EAAAA,EAAAA,KAAA,KAAAV,SAAIyD,QACrBnD,EAAAA,EAAAA,MAAA,MAAAN,SAAA,CAAI,QAAIU,EAAAA,EAAAA,KAAA,KAAAV,SAAG,cACXM,EAAAA,EAAAA,MAAA,MAAAN,SAAA,CAAI,gBAAYU,EAAAA,EAAAA,KAAA,MAAAV,SAAK+I,QACrBzI,EAAAA,EAAAA,MAAA,MAAAN,SAAA,CAAI,UACAU,EAAAA,EAAAA,KAACkJ,EAAW,CACRpE,KAAMkD,EACN/E,MAAOA,EACP9B,QAASA,EACT4D,cAAepC,WAMvC,E,oBCNA,EAvEqC,SAAC1D,GAClC,IAAAkK,EAA6ClK,EAAtCqJ,QAAUxF,EAAIqG,EAAJrG,KAAMM,EAAO+F,EAAP/F,QAAUgB,EAAYnF,EAAZmF,SAC3BjD,GAAU3B,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAM0B,QAAQiI,OAAO,IACtD9H,GAAWC,EAAAA,EAAAA,MACjBC,EAAgCC,EAAAA,SAAuBqB,GAAKpB,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAArD6H,EAAO3H,EAAA,GAAE4H,EAAY5H,EAAA,GAEtBY,EAAmBb,EAAAA,aAAkB,SAACc,GACxC+G,EAAa/G,EAAMC,OAAOC,MAC9B,GAAG,IAEG8G,EAAe9H,EAAAA,aAAkB,WAC/BN,GACAG,GAASkI,EAAAA,EAAAA,IAAgB,CAACrI,QAASA,EAAQ2B,KAAMuG,QAAS,CAACvG,KAAMuG,EAASjG,QAAAA,KAElF,GAAG,CAACjC,EAASiC,EAASiG,EAAS/H,IAEzBmI,EAAoBhI,EAAAA,aAAkB,WACxC,GAAIN,EAAS,CACTG,GAASoI,EAAAA,EAAAA,IAAW,oCACpB,IAAMC,EAAc,GAAAC,QAAAC,EAAAA,EAAAA,GAAO1I,EAAQwI,gBAAc,CAAEvG,IACnD9B,GAASwI,EAAAA,EAAAA,IAAc,CAAChH,KAAM3B,EAAQ2B,KAAM3B,SAAO4I,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAM5I,GAAO,IAAEwI,eAAAA,OAClEvF,GACJ,CACJ,GAAG,CAACjD,EAASiC,EAAS9B,EAAU8C,IAEhC,OACIxE,EAAAA,EAAAA,MAAC8D,EAAkB,CACfxE,MAAO4D,EACP3D,SAAUiE,EACVhE,MAhC2B,oBAiC3BC,SACIO,EAAAA,EAAAA,MAAC6B,EAAAA,SAAc,CAAAnC,SAAA,EACXU,EAAAA,EAAAA,KAAC2D,EAAAA,EAAM,CACHC,QAAQ,YACRC,MAAM,YACNC,UAAWhB,GAAQA,IAASuG,EAC5BtF,QAASwF,EAAajK,SACzB,iBAGDU,EAAAA,EAAAA,KAAC2D,EAAAA,EAAM,CACHC,QAAQ,YACRC,MAAM,YACNE,QAAS0F,EAAkBnK,SAC9B,oBAIRA,SAAA,EAEDM,EAAAA,EAAAA,MAAA,KAAAN,SAAA,CAAG,WAAS8D,MACZpD,EAAAA,EAAAA,KAACgE,EAAAA,EAAS,CACNC,UAAQ,EACRC,OAAO,QACPN,QAAQ,WACRO,MAAM,OACN1B,MAAO4G,EACPjF,SAAU9B,EACV+B,WAAS,MAIzB,ECrBA,EA3CuC,SAACpF,GACpC,IAAOkC,EAAwDlC,EAAxDkC,QAAS6I,EAA+C/K,EAA/C+K,eAAgBC,EAA+BhL,EAA/BgL,gBAAiBC,EAAcjL,EAAdiL,WAE3CC,EAAOH,GACThK,EAAAA,EAAAA,KAACoK,EAAU,CACPvC,OAAQmC,EACR7I,QAASA,EACT4G,SAAUmC,IAEdD,GACAjK,EAAAA,EAAAA,KAACqK,EAAW,CACR/B,QAAS2B,EACT7F,SAAU8F,KAGdlK,EAAAA,EAAAA,KAACsK,EAAS,CAACnJ,QAASA,IAGxB,OACIvB,EAAAA,EAAAA,MAACwH,EAAAA,EAAG,CAACpG,QAAQ,eAAeN,MAAM,MAAMX,SAAS,WAAUT,SAAA,EACnC,MAAlB0K,GAA6C,MAAnBC,KAA4BjK,EAAAA,EAAAA,KAACuK,EAAAA,EAAG,CACxD1G,MAAM,UACN2G,KAAK,SACLzG,QAASmG,EACTpK,GAAI,CAACC,SAAU,WAAYY,IAAK,QAASC,MAAO,SAAStB,UAEzDU,EAAAA,EAAAA,KAACyK,EAAAA,EAAY,MAEhBN,IAGb,E,6GCRA,GAzBsC,SAAClL,GACnC,IAAKA,EAAMuG,OACP,OAAOxF,EAAAA,EAAAA,KAAC0K,GAAAA,EAAW,CAAC5K,GAAI,CAAC+D,MAAO8G,EAAAA,EAAAA,QAGpC,IAAOC,EAAc3L,EAAMuG,OAApBoF,WACP,OAAKA,EAIc,MAAfA,GACO5K,EAAAA,EAAAA,KAAC6K,GAAAA,EAAW,CAAC/K,GAAI,CAAC+D,MAAO,aACzB+G,EAAa,KACb5K,EAAAA,EAAAA,KAAC8K,GAAAA,EAAe,CAAChL,GAAI,CAAC+D,MAAOkH,GAAAA,EAAAA,SAE7B/K,EAAAA,EAAAA,KAACgL,GAAAA,EAAa,CAAClL,GAAI,CAAC+D,MAAOoH,EAAAA,EAAAA,SAR3BjL,EAAAA,EAAAA,KAAC0K,GAAAA,EAAW,CAAC5K,GAAI,CAAC+D,MAAOoH,EAAAA,EAAAA,OAUxC,ECsCA,GArD2C,SAAChM,GACxC,IAAYiM,EAA2CjM,EAAhDyH,IAAczD,EAAkChE,EAAlCgE,MAAOgD,EAA2BhH,EAA3BgH,OAAQT,EAAmBvG,EAAnBuG,OAAQzB,EAAW9E,EAAX8E,QACtCzC,GAAWC,EAAAA,EAAAA,MAEXrC,EAAQuC,EAAAA,SAAc,oBAAAmI,OAAS3D,EAAM,QAAA2D,OAAOsB,EAAO,QAAAtB,OAAO3G,EAAK,GAAI,CAACgD,EAAQiF,EAASjI,IAErFkI,EAAgB1J,EAAAA,aAAkB,WACpCH,GAAS8J,EAAAA,EAAAA,IAAS,CAACF,QAAAA,EAASjI,MAAAA,IAChC,GAAG,CAACiI,EAASjI,EAAO3B,IAEd+J,EAAc5J,EAAAA,aAAkB,WAClC,IAAM6J,EAAW9F,EAEVA,EAAO+F,SAER/F,EAAO+F,SAAS9L,MAChB,aAAe+F,EAAO+F,SAAS9L,MAC/B+F,EAAO+F,SAASA,SAChBC,KAAKC,UAAUjG,EAAO+F,SAASA,UAC/B,sDAAwD/F,EAAO+F,SAASX,WALxE,wBAFA,6BAQN7G,EAAQ7E,EAAOoM,EACnB,GAAG,CAACpM,EAAOsG,EAAQzB,IAYnB,OAVAtC,EAAAA,WAAgB,WACZ,IAAK+D,GAAgC,MAAtBA,EAAOoF,WAAoB,CACtC,IAAMc,EAAU9E,WAAWuE,EAAe,KAC1C,OAAO,WAAOQ,aAAaD,EAAS,CACxC,CAAO,GAAIlG,GAAgC,MAAtBA,EAAOoF,WAAoB,CAC5C,IAAMnC,EAAUnH,GAASsK,EAAAA,EAAAA,IAAU,CAAC1G,UAAU,KAC9C,OAAO,WAAOuD,EAAQK,OAAQ,CAClC,CACJ,GAAG,CAACtD,EAAQ2F,EAAe7J,KAGvB1B,EAAAA,EAAAA,MAACiM,EAAAA,EAAc,CAAC9H,QAASsH,EAAY/L,SAAA,EACjCU,EAAAA,EAAAA,KAAC8L,EAAAA,EAAY,CAAAxM,UACTU,EAAAA,EAAAA,KAAC+L,GAAY,CAACvG,OAAQA,OAE1BxF,EAAAA,EAAAA,KAACgM,EAAAA,EAAY,CAACC,QAAS/M,MAGnC,ECOA,GAlD2C,SAACD,GACxC,IAAMiN,GAAU1M,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAM0B,QAAQgL,UAAU,IAC/D3K,EAA4BC,EAAAA,SAAuB,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA/CtC,EAAKwC,EAAA,GAAE0K,EAAU1K,EAAA,GACxBI,EAAgCL,EAAAA,SAAuB,IAAGM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAAnDwJ,EAAOvJ,EAAA,GAAEsK,EAAYtK,EAAA,GAEtBuK,EAAa7K,EAAAA,aAAkB,SAACvC,EAAeoM,GACjDc,EAAWlN,GACXmN,EAAaf,EACjB,GAAG,IAEGiB,EAAc9K,EAAAA,aAAkB,WAClC2K,EAAW,IACXC,EAAa,GACjB,GAAG,IAEH,OACIzM,EAAAA,EAAAA,MAAC6B,EAAAA,SAAc,CAAAnC,SAAA,EACXU,EAAAA,EAAAA,KAACwM,EAAAA,EAAI,CAAAlN,SACA4M,EAAQ3I,KAAI,SAACkJ,GAAK,OACfzM,EAAAA,EAAAA,KAAC0M,GAAiB,CAEdhG,IAAK+F,EAAM/F,IACXzD,MAAOwJ,EAAMxJ,MACbgD,OAAQwG,EAAMxG,OACdT,OAAQiH,EAAME,QAAUF,EAAME,OAAOF,EAAMxG,QAC3ClC,QAASuI,GAAW,GAAA1C,OALZ6C,EAAM/F,IAAG,QAAAkD,OAAO6C,EAAMxJ,OAMhC,OAGVjD,EAAAA,EAAAA,KAAC4M,EAAAA,EAAM,CACH1N,MAAOA,EACP2N,QAAS3N,IAAUoM,GACnBwB,OAAQ,CAAC3I,MAAO,KAAM8B,OAAQsG,GAC9BlN,QAAS,GAAGC,UAEZU,EAAAA,EAAAA,KAAC+M,EAAAA,EAAa,CAAAzN,UACVU,EAAAA,EAAAA,KAACgN,EAAAA,EAAiB,CAAA1N,SACbgM,UAMzB,ECmBA,GA9DoD,SAACrM,GACjD,IAAOC,EAAyDD,EAAzDC,MAAOiF,EAAkDlF,EAAlDkF,MAAO8I,EAA2ChO,EAA3CgO,QAASjH,EAAkC/G,EAAlC+G,QAASkH,EAAyBjO,EAAzBiO,YAAaC,EAAYlO,EAAZkO,SACpD3L,EAAkCC,EAAAA,SAAyB,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAvD0E,EAAQxE,EAAA,GAAEyE,EAAazE,EAAA,GAExB0E,EAAe3E,EAAAA,aAAkB,SAACc,GACpC,IAAOE,EAASF,EAAMC,OAAfC,MACP0D,EAA+B,kBAAV1D,EAAqB,GAAKA,EACnD,GAAG,IAEG4I,EAAc5J,EAAAA,aAAkB,WAClC0L,EAASjH,EACb,GAAG,CAACA,EAAUiH,IAMd,OAJA1L,EAAAA,WAAgB,WACZ0E,EAAc8G,EAClB,GAAG,CAACA,KAGArN,EAAAA,EAAAA,MAACwH,EAAAA,EAAG,CAACpG,QAAQ,OAAOqG,WAAW,SAAQ/H,SAAA,EACnCU,EAAAA,EAAAA,KAAA,KAAAV,SAAIJ,KACJc,EAAAA,EAAAA,KAACwE,EAAAA,EAAW,CAACgG,KAAK,QAAQ1K,GAAI,CAACwH,SAAU,EAAGpD,OAAQ,SAAS5E,UACzDU,EAAAA,EAAAA,KAAC4E,EAAAA,EAAM,CACH2C,UAAQ,EACRlD,WAAS,EACT5B,MAAOyD,EACP9B,SAAUgC,EACVoB,YAAa,SAACC,GAAM,OAChBzH,EAAAA,EAAAA,KAACoH,EAAAA,EAAG,CAACtH,GAAI,CAACkB,QAAS,OAAQ0G,SAAU,OAAQxG,IAAK,IAAK5B,SAClDmI,EAAOlE,KAAI,SAACd,GAAK,OACdzC,EAAAA,EAAAA,KAAC2H,EAAAA,EAAI,CAAaxD,MAAO1B,GAAdA,EAAuB,KAEpC,EACRnD,SAED0G,EAAQzC,KAAI,SAACd,GAAK,OACfzC,EAAAA,EAAAA,KAACwD,EAAAA,EAAQ,CAAaf,MAAOA,EAAMnD,SAAEmD,GAAtBA,EAAuC,SAIlEzC,EAAAA,EAAAA,KAAC2D,EAAAA,EAAM,CACHC,QAAQ,YACRC,MAAM,YACNC,UAAWoJ,EACXnJ,QAASsH,EAAY/L,SAEpB6E,MAIjB,ECrCMiJ,GAAqB,CAAClJ,OAAQ,eAkOpC,GA/NwC,SAACjF,GAAW,IAADoO,EACzClM,GAAU3B,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAM0B,QAAQiI,OAAO,IACtDkE,GAAU9N,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAMC,MAAM6N,QAAQ,IACrDhO,GAASC,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAMC,MAAMC,OAAO,IACnD2B,GAAWC,EAAAA,EAAAA,MACXiM,GAAWC,EAAAA,EAAAA,MACjBjM,EAA0BC,EAAAA,UAAwB,GAAMC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAjDqL,EAAInL,EAAA,GAAEgM,EAAShM,EAAA,GACtBI,EAA8CL,EAAAA,WAAyBM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAAhEkI,EAAcjI,EAAA,GAAE4L,EAAmB5L,EAAA,GAC1CG,EAAgDT,EAAAA,WAA0BU,GAAAR,EAAAA,EAAAA,GAAAO,EAAA,GAAnE+H,EAAe9H,EAAA,GAAEyL,EAAoBzL,EAAA,GAEtCmK,EAAa7K,EAAAA,aAAkB,WACjCiM,GAAU,EACd,GAAG,IAEGnB,EAAc9K,EAAAA,aAAkB,WAClCiM,GAAU,EACd,GAAG,IAEGG,EAAiBpM,EAAAA,aAAkB,WACrCkM,OAAoB3K,GACpB4K,OAAqB5K,EACzB,GAAG,IAEG8K,EAAerM,EAAAA,aAAkB,SAACsM,GAChC5M,IACkB,YAAd4M,EAAKC,MACLL,OAAoB3K,GACpB4K,EAAqBzM,EAAQmH,QAAQpF,MAAK,SAACoF,GAAiB,OAAKA,EAAQlF,UAAY2K,EAAKpJ,EAAE,MACvE,WAAdoJ,EAAKC,MACZL,EAAoBxM,EAAQ0G,OAAO3E,MAAK,SAAC2E,GAAe,OAAKA,EAAO/E,OAASiL,EAAKpJ,EAAE,KACpFiJ,OAAqB5K,KAErB2K,OAAoB3K,GACpB4K,OAAqB5K,IAGjC,GAAG,CAAC7B,IAEE8M,EAAiBxM,EAAAA,aAAkB,WACrCH,GAASoI,EAAAA,EAAAA,IAAW,8CACpBpI,GAASsK,EAAAA,EAAAA,IAAU,CAAC1G,UAAU,IAClC,GAAG,CAAC5D,IAEE4M,EAAqBzM,EAAAA,aAAkB,SAAC0M,GACtChN,GACAG,GAASwI,EAAAA,EAAAA,IAAc,CAAChH,KAAM3B,EAAQ2B,KAAM3B,SAAO4I,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAM5I,GAAO,IAAEgN,OAAAA,MAE1E,GAAG,CAAChN,EAASG,IAEP8M,EAAqB3M,EAAAA,aAAkB,SAAC4M,GAC1C,GAAIlN,EAAS,CACT,IAAMwI,EAAiBxI,EAAQwI,eAAerG,QAC1C,SAACR,GAAY,OAAMuL,EAAarF,SAASlG,EAAK,IAElDxB,GAASoI,EAAAA,EAAAA,IAAW,oCACpBpI,GAASwI,EAAAA,EAAAA,IAAc,CAAChH,KAAM3B,EAAQ2B,KAAM3B,SAAO4I,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAM5I,GAAO,IAAEwI,eAAAA,MACtE,CACJ,GAAG,CAACxI,EAASG,IAEPgN,EAAwB7M,EAAAA,aAAkB,WACxCN,GACAG,GAASkI,EAAAA,EAAAA,IAAgB,CAACrI,QAASA,EAAQ2B,OAEnD,GAAG,CAAC3B,EAASG,IAEPiN,EAAsB9M,EAAAA,aAAkB,SAAC+M,GAC3C,GAAIrN,EAAS,CACT,IAAMsN,EAASjD,KAAKkD,MAAMF,GAC1BlN,GAASwI,EAAAA,EAAAA,IAAc,CAAChH,KAAM3B,EAAQ2B,KAAM3B,QAASsN,IACzD,CACJ,GAAG,CAACtN,EAASG,IAEPqN,EAAsBlN,EAAAA,aAAkB,WACtCN,GACAG,GAASsN,EAAAA,EAAAA,IAAc,CAAC9L,KAAM3B,EAAQ2B,QAAQ6F,SAASC,MAAK,kBAAM4E,EAAS,OAAO,IAEtFjB,GACJ,GAAG,CAACpL,EAASoL,EAAajL,EAAUkM,IAEpCqB,EAAuBpN,EAAAA,SAAc,WACjC,IAAMqN,EAA+B,GACrC,IAAK3N,EACD,MAAO,CAAC2N,EAAc,IAG1B,IAAMC,EAA+B5N,EAAQmH,QAAQ/E,KAAI,SAAC+E,GAAiB,MAAM,CAC7ExF,KAAMwF,EAAQxF,KACd6B,GAAI2D,EAAQlF,QACZ4K,KAAM,UACNnK,MAAOyE,EAAQlF,QAAQmC,WAAW,aAAe,cAAWvC,EAC/D,IAEKgM,EAA8B7N,EAAQ0G,OAAOtE,KAAI,SAACsE,GAAqB,IAADoH,EAClElB,EAAqB,CACvBjL,KAAM+E,EAAO/E,KACb6B,GAAIkD,EAAO/E,KACXkL,KAAM,SACNnK,MAAOgE,EAAO5E,MAAQ,QAAU,SAMpC,OAJe,QAAfgM,EAAApH,EAAOC,gBAAQ,IAAAmH,GAAfA,EAAiBxI,SAAQ,SAAC6B,GACtB,IAAM9F,EAASuM,EAAa7L,MAAK,SAACgM,GAAC,OAAKA,EAAEvK,KAAO2D,EAAQlF,OAAO,IAC5DZ,GAASsM,EAAaK,KAAK,CAACC,OAAQrB,EAAMvL,OAAAA,EAAQ6M,OAAQ,GAClE,IACOtB,CACX,IAEA,MAAO,CAACe,EAAcE,EAAYpF,OAAOmF,GAC7C,GAAG,CAAC5N,IAASmO,GAAA3N,EAAAA,EAAAA,GAAAkN,EAAA,GA5BNU,EAAKD,EAAA,GAAEE,EAAKF,EAAA,GA8BnB,IAAKnO,EACD,OAAO,KAGX,IAAMsO,EAAgBnC,KAA2B,QAAfD,EAAClM,EAAQgN,cAAM,IAAAd,GAAdA,EAAgB1H,SAAUpG,EACvDmQ,GAAK7F,EAAAA,EAAAA,GAAO1I,EAAQgN,QAE1B,OACIvO,EAAAA,EAAAA,MAAC6B,EAAAA,SAAc,CAAAnC,SAAA,EACXM,EAAAA,EAAAA,MAAA,MAAAN,SAAA,CAAI,YAAU6B,EAAQ2B,KAAK,QAC3B9C,EAAAA,EAAAA,KAACoH,EAAAA,EAAG,CAACuI,GAAG,MAAMC,GAAG,MAAKtQ,SACjB6B,EAAQ4B,YAAYsC,MAAM,MAAM9B,KAAI,SAACsM,EAAc/J,GAAa,OAC7D9F,EAAAA,EAAAA,KAAA,KAAAV,SAAgBuQ,GAAR/J,EAAiB,OAGjC9F,EAAAA,EAAAA,KAAC4E,GAAM,CACH1F,MAAM,iBACNiF,MAAM,QACN8I,QAAS9L,EAAQgN,OACjBnI,QAAS0J,EACTxC,YAAauC,EACbtC,SAAUe,KAEdlO,EAAAA,EAAAA,KAAC4E,GAAM,CACH1F,MAAM,kBACNiF,MAAM,OACN8I,QAAS9L,EAAQwI,eACjB3D,QAAS7E,EAAQwI,eACjBuD,YAAa3N,EACb4N,SAAUiB,KAEdxO,EAAAA,EAAAA,MAACwH,EAAAA,EAAG,CAACpG,QAAQ,OAAOqG,WAAW,SAASyI,eAAe,SAAQxQ,SAAA,EAC3DU,EAAAA,EAAAA,KAAC2D,EAAAA,EAAM,CACHC,QAAQ,YACRC,MAAM,YACNC,UAAWvE,EACXwE,QAASuK,EACTxO,GAAIsN,GAAmB9N,SAC1B,sBAGDU,EAAAA,EAAAA,KAAC2D,EAAAA,EAAM,CACHC,QAAQ,YACRC,MAAM,YACNC,UAAWvE,EACXwE,QAASkK,EACTnO,GAAIsN,GAAmB9N,SAC1B,sBAGDU,EAAAA,EAAAA,KAAC+P,EAAAA,EAAc,CACXC,MAAK,YAAApG,OAAczI,EAAQ2B,MAC3BmN,SAAQ,GAAArG,OAAKzI,EAAQ2B,KAAI,SACzBqB,MAAM,UACNrE,GAAIsN,MAERpN,EAAAA,EAAAA,KAACkQ,EAAAA,EAAU,CACP/L,MAAM,UACN8I,QAAS9L,EACTgP,SAAU5B,EACVzK,UAAWvE,EACXO,GAAIsN,MAERpN,EAAAA,EAAAA,KAAC2D,EAAAA,EAAM,CACHC,QAAQ,YACRC,MAAM,YACNC,UAAW2L,EACX1L,QAASuI,EACTxM,GAAIsN,GAAmB9N,SAC1B,uBAILU,EAAAA,EAAAA,KAAA,MAAAV,SAAI,cACJM,EAAAA,EAAAA,MAACwH,EAAAA,EAAG,CAACpG,QAAQ,OAAOqG,WAAW,aAAY/H,SAAA,EACvCU,EAAAA,EAAAA,KAACoH,EAAAA,EAAG,CAACpG,QAAQ,eAAeN,MAAM,MAAKpB,UACnCU,EAAAA,EAAAA,KAACoQ,EAAAA,EAAQ,CACLjQ,OAAO,QACPqP,MAAOA,EACPD,MAAOA,EACPc,aAAcvC,EACdwC,aAAczC,OAGtB7N,EAAAA,EAAAA,KAACuQ,EAAM,CACHC,SAAUrP,EAAQ0G,OAClB1G,QAASA,EAAQ2B,KACjBkH,eAAgBA,EAChBC,gBAAiBA,EACjBC,WAAY2D,QAGpB7N,EAAAA,EAAAA,KAACyQ,GAAiB,KAClBzQ,EAAAA,EAAAA,KAAC4M,EAAAA,EAAM,CACH1N,MAAM,gBACN2N,KAAMA,EACNC,OAAQ,CAAC3I,MAAO,SAAU8B,OAAQsG,GAClClN,QAAS,CAAC,CAAC8E,MAAO,SAAU8B,OAAQ0I,IAAsBrP,UAE1DU,EAAAA,EAAAA,KAAC+M,EAAAA,EAAa,CAAAzN,UACVM,EAAAA,EAAAA,MAACoN,EAAAA,EAAiB,CAAA1N,SAAA,CAAC,wBACO6B,EAAQ2B,KAAK,8CAM3D,E,iCCzKA,GA5D4C,SAAC7D,GACzC,IAAkBkC,GAAWuP,EAAAA,EAAAA,MAAtBC,UACDrP,GAAWC,EAAAA,EAAAA,MACXiM,GAAWC,EAAAA,EAAAA,MACjBmD,GAA6DC,EAAAA,GAAAA,IAAkB,CAACC,KAAM,WAA/EC,EAAOH,EAAPG,QAASC,EAAYJ,EAAZI,aAAcC,EAAKL,EAALK,MAAmBC,EAAON,EAAnBO,UAAYD,QAE3CE,EAAW3P,EAAAA,aAAkB,SAAA4P,GAA2B,IAAzBC,EAAQD,EAARC,SAC7BnQ,IACAG,GAASiQ,EAAAA,GAAAA,IAAY,CAACpQ,QAAAA,EAASmQ,SAAAA,KAC1B3I,SACAC,MAAK,WAAO4E,EAAS,gBAAD5D,OAAiBzI,EAAO,cAAAyI,OAAa0H,GAAY,IAC1EL,IAER,GAAG,CAAC9P,EAASG,EAAUkM,EAAUyD,IAEjC,OACIjR,EAAAA,EAAAA,KAACH,EAAAA,EAAI,CAACC,GAAI,CAACwH,SAAU,GAAGhI,UACpBM,EAAAA,EAAAA,MAAA,QAAMwR,SAAUJ,EAAaI,GAAU9R,SAAA,EACnCM,EAAAA,EAAAA,MAACiB,EAAAA,EAAW,CAAAvB,SAAA,EACRU,EAAAA,EAAAA,KAAA,MAAAV,SAAI,qBACJU,EAAAA,EAAAA,KAACwR,GAAAA,GAAU,CACP1O,KAAK,WACLiO,QAASA,EACTU,MAAO,CAACxN,UAAU,GAClByN,aAAa,GACbC,OAAQ,SAAAC,GAAA,IAAAC,EAAAD,EAAEE,MAAQ1N,EAAQyN,EAARzN,SAAU2N,EAAMF,EAANE,OAAQtP,EAAKoP,EAALpP,MAAOuP,EAAGH,EAAHG,IAAG,OAC1ChS,EAAAA,EAAAA,KAACgE,EAAAA,EAAS,CACNC,UAAQ,EACRC,OAAO,QACPN,QAAQ,WACRO,MAAM,gBACNC,SAAUA,EACV2N,OAAQA,EACRtP,MAAOA,EACPwP,SAAUD,EACV3N,WAAS,GACX,QAIdrE,EAAAA,EAAAA,KAACc,EAAAA,EAAW,CAAAxB,UACRU,EAAAA,EAAAA,KAAC2D,EAAAA,EAAM,CAACE,MAAM,YAAYD,QAAQ,YAAYoK,KAAK,SAASlK,UAAWoN,EAAQ5R,SAAC,uBAOpG,E,UCEA,GAjD4C,SAACL,GACzC,IAAkBkC,GAAWuP,EAAAA,EAAAA,MAAtBC,UACDrP,GAAWC,EAAAA,EAAAA,MACXiM,GAAWC,EAAAA,EAAAA,MACjBmD,GAA8DC,EAAAA,GAAAA,IAAkB,CAACC,KAAM,WAAhFE,EAAYJ,EAAZI,aAAckB,EAAQtB,EAARsB,SAAUjB,EAAKL,EAALK,MAAmBC,EAAON,EAAnBO,UAAYD,QAE5CE,EAAW3P,EAAAA,aAAkB,SAAA4P,GAA2B,IAAzBC,EAAQD,EAARC,SAC7BnQ,IACAG,GAAS6Q,EAAAA,GAAAA,IAAe,CAAChR,QAAAA,EAASmQ,SAAUA,EAAS,MAChD3I,SACAC,MAAK,SAAAgJ,GAAa,IAAX9O,EAAI8O,EAAJ9O,KAAW0K,EAAS,gBAAD5D,OAAiBzI,EAAO,cAAAyI,OAAa9G,GAAQ,IAC5EmO,IAER,GAAG,CAAC9P,EAASG,EAAU2P,EAAOzD,IAE9B,OACIxN,EAAAA,EAAAA,KAACH,EAAAA,EAAI,CAACC,GAAI,CAACwH,SAAU,GAAGhI,UACpBM,EAAAA,EAAAA,MAAA,QAAMwR,SAAUJ,EAAaI,GAAU9R,SAAA,EACnCM,EAAAA,EAAAA,MAACiB,EAAAA,EAAW,CAAAvB,SAAA,EACRU,EAAAA,EAAAA,KAAA,MAAAV,SAAI,qBACJU,EAAAA,EAAAA,KAACoS,GAAAA,EAAY,CACTjO,MAAM,kBACNkO,OAAO,QACPpO,UAAQ,EACRnB,KAAK,WACLoP,SAAUA,EACVlM,QAAS,CAAC/B,UAAU,SAG5BjE,EAAAA,EAAAA,KAACc,EAAAA,EAAW,CAAAxB,UACRU,EAAAA,EAAAA,KAAC2D,EAAAA,EAAM,CAACE,MAAM,YAAYD,QAAQ,YAAYoK,KAAK,SAASlK,UAAWoN,EAAQ5R,SAAC,0BAOpG,E,4EC5BA,GAhB4C,SAACL,GACzC,IAAAqT,EAA2BrT,EAApBC,MAAAA,OAAK,IAAAoT,EAAG,SAAQA,EAEvB,OACItS,EAAAA,EAAAA,KAACuS,GAAAA,EAAO,CAACrT,MAAOA,EAAOsT,UAAU,YAAWlT,UACxCU,EAAAA,EAAAA,KAACyS,GAAAA,EAAI,CAAC3S,GAAI,CAAC+D,MAAO6O,GAAAA,EAAAA,SAG9B,EC0CA,GA1C2C,SAACzT,GACxC,IAAA0T,EAAoF1T,EAA7EqS,SAAWxO,EAAI6P,EAAJ7P,KAAM8P,EAAkBD,EAAlBC,mBAA+BC,EAAIF,EAAfG,UAAkBC,EAAsB9T,EAAtB8T,SAAUC,EAAY/T,EAAZ+T,SAClE7R,GAAU3B,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAM0B,QAAQiI,OAAO,IAEtD6J,EAAsBxR,EAAAA,aAAkB,SAACc,GAC3CA,EAAM2Q,iBACN3Q,EAAM4Q,kBACNH,EAAS,CAAC1B,SAAUxO,EAAM+P,KAAMO,OAAOC,KAAKR,IAChD,GAAG,CAAC/P,EAAM+P,EAAMG,IAEVM,EAAe7R,EAAAA,aAAkB,SAACc,GACpCA,EAAM2Q,iBACN3Q,EAAM4Q,kBACNJ,EAASjQ,EACb,GAAG,CAACiQ,EAAUjQ,IAER6C,EAASiN,EAAmBjN,OAC5B4N,EAAS,GAAA3J,OAAMjE,EAAM,sBAAAiE,OAAqBjE,EAAS,EAAI,IAAM,IAEnE,OACI/F,EAAAA,EAAAA,MAACiM,EAAAA,EAAc,CAACvL,UAAWkT,GAAAA,GAAMC,GAAE,gBAAA7J,OAAyB,OAAPzI,QAAO,IAAPA,OAAO,EAAPA,EAAS2B,KAAI,cAAA8G,OAAa9G,GAAQ4Q,eAAa,EAAApU,SAAA,EAChGU,EAAAA,EAAAA,KAAC8L,EAAAA,EAAY,CAAC/H,QAASkP,EAAoB3T,UACvCU,EAAAA,EAAAA,KAAC2T,GAAc,OAEnB3T,EAAAA,EAAAA,KAACgM,EAAAA,EAAY,CAACC,QAASnJ,EAAMyQ,UAAWA,KACxCvT,EAAAA,EAAAA,KAAC4T,GAAAA,EAAuB,CAAAtU,UACpBU,EAAAA,EAAAA,KAAC6T,GAAAA,EAAU,CAACC,KAAK,MAAM/P,QAASuP,EAAahU,UACzCU,EAAAA,EAAAA,KAAC+T,GAAAA,EAAM,UAK3B,E,UCgGA,GA5HuC,SAAC9U,GACpC,IAAO+U,GAActD,EAAAA,EAAAA,MAAdsD,WACD7S,GAAU3B,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAM0B,QAAQiI,OAAO,IACtD6K,GAAYzU,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAMC,MAAMuU,SAAS,IACxD3S,GAAWC,EAAAA,EAAAA,MACXiM,GAAWC,EAAAA,EAAAA,MACjBjM,EAAkDC,EAAAA,WAAwBC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAnE0S,EAAgBxS,EAAA,GAAEyS,EAAqBzS,EAAA,GAC9CI,EAAkDL,EAAAA,WAAwBM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAAnEsS,EAAgBrS,EAAA,GAAEsS,EAAqBtS,EAAA,GAExCuS,EAAmB7S,EAAAA,aAAkB,SAAC6P,GACxC+C,EAAsB/C,EAC1B,GAAG,IAEGiD,EAAoB9S,EAAAA,aAAkB,WACxC4S,OAAsBrR,EAC1B,GAAG,IAEGwR,EAAmB/S,EAAAA,aAAkB,SAACqB,GACxCqR,EAAsBrR,EAC1B,GAAG,IAEG2R,EAAoBhT,EAAAA,aAAkB,WACxC0S,OAAsBnR,EAC1B,GAAG,IAEGsQ,EAAe7R,EAAAA,aAAkB,WACxB,OAAPN,QAAO,IAAPA,GAAAA,EAAS2B,MAAQoR,GACjB5S,GAASoT,EAAAA,GAAAA,IAAe,CAACvT,QAASA,EAAQ2B,KAAMwO,SAAU4C,KACrDvL,SACAC,MAAK,WAAWsL,IAAqBF,GAAaxG,EAAS,gBAAkBrM,EAAQ2B,KAAO,IAErG2R,GACJ,GAAG,CAACtT,EAAS+S,EAAkBF,EAAYS,EAAmBnT,EAAUkM,IAElEmH,EAAWlT,EAAAA,SAAc,WAC3B,IAAMmT,EAAoB,OAAPzT,QAAO,IAAPA,OAAO,EAAPA,EAAS2B,KAC5B,OAAK8R,GAAeX,EAAU7O,eAAewP,GAItCxB,OAAOyB,YAAYZ,EAAUW,GAAYrR,KAAI,SAACuR,GAAW,MAAM,CAACA,GAAK,EAAK,KAHtE,CAAC,CAIhB,GAAG,CAACb,EAAW9S,IAET4T,EAAYtT,EAAAA,SAAc,WAAO,IAADuT,EAElC,QADoB,OAAP7T,QAAO,IAAPA,GAAiB,QAAV6T,EAAP7T,EAASmQ,gBAAQ,IAAA0D,OAAV,EAAPA,EAAmBC,UAAW,IAC/BC,MAAK,SAAC5D,EAAqB6D,GAAgB,OAAK7D,EAASxO,KAAKsS,cAAcD,EAAMrS,KAAK,GACvG,GAAG,CAAC3B,IAEEkU,EAAqBN,EAAUzR,QACjC,SAACgO,GAAmB,OAAKqD,EAASrD,EAASxO,KAAK,IAClDS,KAAI,SAAC+N,GAAmB,OACtBtR,EAAAA,EAAAA,KAACsV,GAAiB,CAEdhE,SAAUA,EACV0B,SAAUsB,EACVvB,SAAUyB,GAHLlD,EAASxO,KAIhB,IAGAyS,EAAmBR,EAAUzR,QAC/B,SAACgO,GAAmB,OAAMqD,EAASrD,EAASxO,KAAK,IACnDS,KAAI,SAAC+N,GAAmB,OACtBtR,EAAAA,EAAAA,KAACsV,GAAiB,CAEdhE,SAAUA,EACV0B,SAAUsB,EACVvB,SAAUyB,GAHLlD,EAASxO,KAIhB,IAGA0S,EAAcH,EAAmB1P,OAAS,GAAK,EAAI4P,EAAiB5P,OAE1E,OACI/F,EAAAA,EAAAA,MAAC6B,EAAAA,SAAc,CAAAnC,SAAA,EACXU,EAAAA,EAAAA,KAACwM,EAAAA,EAAI,CAAAlN,SAAE+V,IACNG,IAAexV,EAAAA,EAAAA,KAACyV,GAAAA,EAAO,KACxBzV,EAAAA,EAAAA,KAACwM,EAAAA,EAAI,CAAAlN,SAAEiW,KACP3V,EAAAA,EAAAA,MAACwH,EAAAA,EAAG,CACApG,QAAQ,OACRqG,WAAW,aACXnG,IAAI,MACJwU,GAAG,MACHC,GAAG,MACHC,GAAI,EACJlV,MAAM,OACNmV,UAAU,aAAYvW,SAAA,EAEtBU,EAAAA,EAAAA,KAAC8V,GAAc,KACf9V,EAAAA,EAAAA,KAAC+V,GAAc,QAEnB/V,EAAAA,EAAAA,KAAC4M,EAAAA,EAAM,CACH1N,MAAM,+BACN2N,KAAMmJ,QAAQ9B,GACdpH,OAAQ,CAAC3I,MAAO,SAAU8B,OAAQwO,GAClCpV,QAAS,CAAC,CAAC8E,MAAO,SAAU8B,OAAQqN,IAAehU,UAEnDU,EAAAA,EAAAA,KAAC+M,EAAAA,EAAa,CAAAzN,UACVM,EAAAA,EAAAA,MAACoN,EAAAA,EAAiB,CAAA1N,SAAA,CAAC,iBACA4U,EAAiB,mFAK3C/S,GAAWiT,IAAoBpU,EAAAA,EAAAA,KAACiW,GAAAA,EAAoB,CACjD9U,QAASA,EAAQ2B,KACjBwO,SAAU8C,EAAiB9C,SAC3BwB,UAAWsB,EAAiBvB,KAC5BqD,QAAS3B,MAIzB,E,sBC/GM4B,GAAwD,SAAClX,GAC3D,IAAOwD,EAA6BxD,EAA7BwD,MAAOyD,EAAsBjH,EAAtBiH,SAAU5G,EAAYL,EAAZK,SAClB8W,EAAS3T,IAAUyD,EAEzB,OACIlG,EAAAA,EAAAA,KAAA,OAAKqW,KAAK,WAAWD,OAAQA,EAAO9W,UAC9B8W,GAAU9W,GAGxB,EAkFA,GA/E0D,SAACL,GACvD,IAAAqX,GAAgC5F,EAAAA,EAAAA,MAAzBC,EAAS2F,EAAT3F,UAAWqD,EAAUsC,EAAVtC,WACZ1S,GAAWC,EAAAA,EAAAA,MACjBC,EAAgCC,EAAAA,SAAwB,WAAUC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA3D+U,EAAW7U,EAAA,GAAE8U,EAAQ9U,EAAA,GAEtB+U,EAAkBhV,EAAAA,aAAkB,SAACc,EAA6BE,GACpE+T,EAAS/T,EACb,GAAG,IAyBH,OAvBAhB,EAAAA,WAAgB,WAEZ,GADAH,GAASoV,EAAAA,EAAAA,IAAS,YAAD9M,OAAa+G,EAAS,OACnCA,EAAW,CACX,IAAMlI,EAAUnH,GAASqV,EAAAA,EAAAA,IAAW,CAAC7T,KAAM6N,KAC3C,OAAO,WAAOlI,EAAQK,OAAQ,CAClC,CACJ,GAAG,CAACxH,EAAUqP,IAEdlP,EAAAA,WAAgB,WACZH,GAASsV,EAAAA,EAAAA,OACL5C,GACAwC,EAAS,WAEjB,GAAG,CAACxC,EAAY1S,IAEhBG,EAAAA,WAAgB,WACZ,IAAMoV,EAAW,CACbvV,GAASsK,EAAAA,EAAAA,IAAU,CAAC1G,UAAU,KAC9B5D,GAASoH,EAAAA,EAAAA,QAEb,OAAO,WAAOmO,EAASpQ,SAAQ,SAACgC,GAAaA,EAAQK,OAAQ,GAAG,CACpE,GAAG,CAACxH,KAGA1B,EAAAA,EAAAA,MAAC6B,EAAAA,SAAc,CAAAnC,SAAA,EACXU,EAAAA,EAAAA,KAAC8W,EAAAA,EAAM,CAACjT,MAAM,UAAU/D,IAAEiK,EAAAA,EAAAA,GAAA,CAAGhK,SAAU,UAAagX,GAAAA,GAAoBzX,UACpEM,EAAAA,EAAAA,MAACoX,EAAAA,EAAI,CACDvU,MAAO8T,EACPnS,SAAUqS,EACVQ,UAAQ,EACRrT,QAAQ,YACRsT,UAAU,UACVC,eAAe,YAAW7X,SAAA,EAE1BU,EAAAA,EAAAA,KAACoX,EAAAA,EAAG,CAACjT,MAAM,UAAU1B,MAAM,aAC3BzC,EAAAA,EAAAA,KAACoX,EAAAA,EAAG,CAACjT,MAAM,YAAY1B,MAAM,eAC7BzC,EAAAA,EAAAA,KAACoX,EAAAA,EAAG,CAACjT,MAAM,YAAY1B,MAAM,eAC7BzC,EAAAA,EAAAA,KAACoX,EAAAA,EAAG,CAACjT,MAAO6P,GAAc,uBAAwBvR,MAAM,WAAWqB,UAAWkQ,UAGtFhU,EAAAA,EAAAA,KAACmW,GAAQ,CAAC1T,MAAM,UAAUyD,SAAUqQ,EAAYjX,UAC5CU,EAAAA,EAAAA,KAACqX,GAAc,OAEnBrX,EAAAA,EAAAA,KAACmW,GAAQ,CAAC1T,MAAM,YAAYyD,SAAUqQ,EAAYjX,UAC9CU,EAAAA,EAAAA,KAACsX,GAAa,OAElBtX,EAAAA,EAAAA,KAACmW,GAAQ,CAAC1T,MAAM,YAAYyD,SAAUqQ,EAAYjX,SAC7CqR,IAAa3Q,EAAAA,EAAAA,KAACuX,GAAAA,EAAqB,CAACpW,QAASwP,OAElD3Q,EAAAA,EAAAA,KAACmW,GAAQ,CAAC1T,MAAM,WAAWyD,SAAUqQ,EAAYjX,SAC5CL,EAAMK,aAIvB,C,kEC3FMkY,EAAS,CACX3P,OAAiC,qBACjCS,QAAkC,oBAClCnH,QAAkC,uBAgKtC,IApIkC,SAAClC,GAC/B,IAAOkB,EAAoDlB,EAApDkB,OAAQqP,EAA4CvQ,EAA5CuQ,MAAOD,EAAqCtQ,EAArCsQ,MAAOc,EAA8BpR,EAA9BoR,aAAcC,EAAgBrR,EAAhBqR,aACrCmH,EAzBY,WAClB,IAAAjW,EAAsCC,EAAAA,SAAoC,CACtEf,WAAOsC,EACP7C,YAAQ6C,IACVtB,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAHKiW,EAAU/V,EAAA,GAAEgW,EAAehW,EAAA,GAkBlC,OAbAD,EAAAA,WAAgB,WACZ,IAAMkW,EAAe,WAAOD,EAAgB,CACxChX,MAAOmG,OAAO+Q,WACdzX,OAAQ0G,OAAOgR,aAChB,EAMH,OALAhR,OAAOiR,iBAAiB,SAAUH,GAGlCA,IAEO,kBAAM9Q,OAAOkR,oBAAoB,SAAUJ,EAAc,CACpE,GAAG,IAEIF,CACX,CAKuBO,GACbC,EAASxW,EAAAA,OAA4B,MAiG3C,OA/FAA,EAAAA,WAAgB,WACZ,GAAKwW,EAAO7O,QAAZ,CAIA,KAAO6O,EAAO7O,QAAQ9J,SAASqG,OAAS,GACpCsS,EAAO7O,QAAQ9J,SAAS,GAAG4Y,SAG/B,IAAM/X,EAAS8X,EAAO7O,QAAQ+O,aACxBzX,EAAQuX,EAAO7O,QAAQgP,YAEvBC,EAAaC,EAAAA,IAAiC9I,GAC/C+I,MAAM,OAAQD,EAAAA,IAAyC/I,GAAO5K,IAAG,SAAC6T,GAAe,OAAKA,EAAE7T,EAAE,IAAE8T,UAAS,SAACD,GAAe,OAAKA,EAAEnJ,MAAM,KAClIkJ,MAAM,UAAWD,EAAAA,GAA8B,KAC/CC,MAAM,WAAYD,EAAAA,IAAwB,IAC1CC,MAAM,WAAYD,EAAAA,IAAwB,IAC1CI,GAAG,QAAQ,WACRC,EAAKC,KAAK,MAAM,SAACJ,GAAe,OAAMA,EAAEpJ,OAAwByJ,CAAC,IAC5DD,KAAK,MAAM,SAACJ,GAAe,OAAMA,EAAEpJ,OAAwB0J,CAAC,IAC5DF,KAAK,MAAM,SAACJ,GAAe,OAAMA,EAAEhW,OAAwBqW,CAAC,IAC5DD,KAAK,MAAM,SAACJ,GAAe,OAAMA,EAAEhW,OAAwBsW,CAAC,IACjE/K,EAAK6K,KAAK,aAAa,SAACJ,GAAe,mBAAA5O,OAAkB4O,EAAEK,EAAC,MAAAjP,OAAK4O,EAAEM,EAAC,OACxE,IAEEC,EAAMT,EAAAA,GAAUL,EAAO7O,SACxBwP,KAAK,UAAW,EAAElY,EAAQ,GAAIP,EAAS,EAAGO,EAAOP,IACjDyY,KAAK,QAAS,qDAEbI,EAAOD,EAAIE,OAAO,QACnBL,KAAK,OAAQ,SACbA,KAAK,SAAUzY,GACfyY,KAAK,QAASlY,GACdkY,KAAK,KAAMlY,EAAQ,GACnBkY,KAAK,KAAMzY,EAAS,GAEnBwY,EAAOI,EAAIE,OAAO,KACnBL,KAAK,QAAS,SACdM,UAAU,SACVC,KAAmB5J,GACnB6J,QACAH,OAAO,QACPL,KAAK,SAAU,QACfA,KAAK,gBAAgB,SAACJ,GAAe,OAAKa,KAAKC,KAAKd,EAAEnJ,OAAO,IAE5DtB,EAAOgL,EAAIE,OAAO,KACnBL,KAAK,QAAS,SACdM,UAAU,SACVC,KAAmB3J,GACnB4J,QACAH,OAAoB,KACpBP,GAAG,YAAY,SAACnW,EAAOiW,GAAqBA,EAAEe,GAAK,KAAMf,EAAEgB,GAAK,IAAK,IACrEC,KAAKnB,EAAAA,MACDI,GAAG,SAAS,SAACnW,GACLA,EAAMmX,QACPrB,EAAWsB,YAAY,IAAKC,UAEhCrX,EAAMsX,QAAQN,GAAKhX,EAAMsX,QAAQhB,EACjCtW,EAAMsX,QAAQL,GAAKjX,EAAMsX,QAAQf,CACrC,IACCJ,GAAG,QAAQ,SAACnW,GACTA,EAAMsX,QAAQN,GAAKhX,EAAMsW,EACzBtW,EAAMsX,QAAQL,GAAKjX,EAAMuW,CAC7B,IACCJ,GAAG,OAAO,SAACnW,GACHA,EAAMmX,QACPrB,EAAWsB,YAAY,EAE/B,KAwBR,OAtBA5L,EAAKkL,OAAO,aACPL,KAAK,SAAU,IACfA,KAAK,QAAS,IACdA,KAAK,KAAM,IACXA,KAAK,KAAM,IACXA,KAAK,cAAc,SAACJ,GAAe,OAAKhB,EAAOgB,EAAExK,KAAK,IAE3DD,EAAKkL,OAAO,QACPa,MAAK,SAACtB,GAAe,OAAKA,EAAE1V,IAAI,IAChC8V,KAAK,SAAU,WACfA,KAAK,KAAM,IACXA,KAAK,KAAM,SACXmB,MAAM,QAAQ,SAACvB,GAAe,OAAKA,EAAE3U,MAAQ2U,EAAE3U,MAAoB,YAAX2U,EAAExK,KAAqB,UAAY,OAAQ,IAEpGqC,GACAtC,EAAK2K,GAAG,SAAS,SAACnW,EAAOiW,GAAe,OAAKnI,EAAamI,EAAE,IAG5DlI,GACA0I,EAAKN,GAAG,QAASpI,GAGd,WAAO+H,EAAW2B,MAAO,CAzFhC,CA0FJ,GAAG,CAACxK,EAAOD,EAAOc,EAAcC,EAAcmH,KAEvCzX,EAAAA,EAAAA,KAAA,OAAKgS,IAAKiG,EAAQ9X,OAAQA,EAAQO,MAAM,QACnD,C","sources":["components/Entities/EntityCardTemplate.tsx","components/Entities/EntityAdd.tsx","components/Entities/EntityAgent.tsx","components/Entities/JobActionSelector.tsx","components/Entities/EntityCard.tsx","components/Entities/NetworkCard.tsx","components/Entities/EntityManager.tsx","components/common/JobStateIcon.tsx","components/Entities/JobsStatusesQuery.tsx","components/Entities/JobsStatusesInfos.tsx","components/Projects/ProjectMiscellaneousSelect.tsx","components/Projects/ProjectDetails.tsx","components/Scenarios/CreateScenarioCard.tsx","components/Scenarios/ImportScenarioCard.tsx","components/common/LaunchScenarioIcon.tsx","components/Scenarios/ScenariosListItem.tsx","components/Scenarios/ScenariosList.tsx","components/Projects/Project.tsx","components/common/Topology.tsx"],"sourcesContent":["import React from 'react';\n\nimport Card from '@mui/material/Card';\nimport CardActions from '@mui/material/CardActions';\nimport CardContent from '@mui/material/CardContent';\nimport CardHeader from '@mui/material/CardHeader';\nimport CardMedia from '@mui/material/CardMedia';\n\nimport {useSelector} from '../../redux';\n\n\nconst EntityCardTemplate: React.FC<React.PropsWithChildren<Props>> = (props) => {\n    const {title, subtitle, media, actions, children} = props;\n    const isUser = useSelector((state) => state.login.is_user);\n\n    return (\n        <Card sx={{position: \"relative\"}}>\n            <CardHeader title={title} subheader={subtitle} sx={{height: \"64px\", backgroundColor: \"rgba(0, 0, 0, 0.4)\"}} />\n            <CardMedia\n                component=\"img\"\n                alt=\"header logo\"\n                image={media}\n                height=\"96\"\n                sx={{objectFit: \"contain\", position: \"absolute\", width: \"96px\", top: 0, right: 8}}\n            />\n            <CardContent>\n                {children}\n            </CardContent>\n            {isUser && actions != null && <CardActions\n                disableSpacing\n                sx={{display: \"flex\", flexDirection: \"column\", gap: 1}}\n            >\n                {actions}\n            </CardActions>}\n        </Card>\n    );\n};\n\n\ninterface Props {\n    title: string;\n    subtitle?: string;\n    media: string;\n    actions?: React.PropsWithChildren<{}>[\"children\"];\n}\n\n\nexport default EntityCardTemplate;\n","import React from 'react';\n\nimport Button from '@mui/material/Button';\nimport FormControl from '@mui/material/FormControl';\nimport InputLabel from '@mui/material/InputLabel';\nimport MenuItem from '@mui/material/MenuItem';\nimport Select from '@mui/material/Select';\nimport TextField from '@mui/material/TextField';\n\nimport EntityCardTemplate from './EntityCardTemplate';\n\nimport {addEntity} from '../../api/entities';\nimport {useDispatch, useSelector} from '../../redux';\nimport type {IAgent} from '../../utils/interfaces';\nimport type {SelectChangeEvent} from '@mui/material/Select';\n\n\nconst image = process.env.PUBLIC_URL + '/assets/project.svg';\n\n\nconst EntityAdd: React.FC<Props> = (props) => {\n    const {project} = props;\n    const isUser = useSelector((state) => state.login.is_user);\n    const agents = useSelector((state) => state.openbach.agents);\n    const dispatch = useDispatch();\n    const [newEntityName, storeNewEntityName] = React.useState<string>(\"\");\n    const [newEntityDescription, storeNewEntityDescription] = React.useState<string>(\"\");\n    const [newEntityAgent, storeNewEntityAgent] = React.useState<string>(\"\");\n\n    const handleNameChange = React.useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n        storeNewEntityName(event.target.value);\n    }, []);\n\n    const handleDescriptionChange = React.useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n        storeNewEntityDescription(event.target.value);\n    }, []);\n\n    const handleAgentChange = React.useCallback((event: SelectChangeEvent) => {\n        const {value} = event.target;\n        storeNewEntityAgent(value ? value : \"\");\n    }, []);\n\n    const handleEntityAdd = React.useCallback(() => {\n        if (!newEntityName) {\n            return;\n        }\n\n        dispatch(addEntity({\n            project,\n            name: newEntityName,\n            description: newEntityDescription || undefined,\n            agent: agents?.find((a: IAgent) => a.address === newEntityAgent),\n        }));\n        storeNewEntityName(\"\");\n        storeNewEntityDescription(\"\");\n        storeNewEntityAgent(\"\");\n    }, [project, agents, newEntityName, newEntityDescription, newEntityAgent, dispatch]);\n\n    const reserved = React.useMemo(() => (agents || []).filter(\n        (agent: IAgent) => !agent.project && agent.reserved === project\n    ).map((agent: IAgent) => (\n        <MenuItem key={agent.address} value={agent.address}>{agent.name}</MenuItem>\n    )), [agents, project]);\n\n    const available = React.useMemo(() => (agents || []).filter(\n        (agent: IAgent) => !agent.project && !agent.reserved\n    ).map((agent: IAgent) => (\n        <MenuItem key={agent.address} value={agent.address}>{agent.name}</MenuItem>\n    )), [agents]);\n\n    if (!isUser) {\n        return (\n            <EntityCardTemplate\n                title=\"Entity\"\n                subtitle=\"Click on an entity to select it\"\n                media={image}\n            >\n                No entity selected\n            </EntityCardTemplate>\n        );\n    }\n\n    return (\n        <EntityCardTemplate\n            title=\"Add Entity\"\n            subtitle=\"Create a new Entity for an Agent\"\n            media={image}\n            actions={\n                <Button\n                    variant=\"contained\"\n                    color=\"secondary\"\n                    disabled={!newEntityName}\n                    onClick={handleEntityAdd}\n                >\n                    Add Entity\n                </Button>\n            }\n        >\n            <TextField\n                required\n                margin=\"dense\"\n                variant=\"standard\"\n                label=\"Entity Name\"\n                value={newEntityName}\n                onChange={handleNameChange}\n                fullWidth\n            />\n            <TextField\n                margin=\"dense\"\n                variant=\"standard\"\n                label=\"Entity Description\"\n                value={newEntityDescription}\n                onChange={handleDescriptionChange}\n                fullWidth\n                multiline\n                rows={3}\n            />\n            <FormControl fullWidth sx={{mt: 3}}>\n                <InputLabel id=\"entity-add-label\">Associated Agent</InputLabel>\n                <Select\n                    required\n                    labelId=\"entity-add-label\"\n                    id=\"entity-add-select\"\n                    label=\"Associated Agent\"\n                    value={newEntityAgent}\n                    onChange={handleAgentChange}\n                >\n                    <MenuItem value=\"\" />\n                    <MenuItem>--- Agents reserved for this project ---</MenuItem>\n                    {reserved}\n                    <MenuItem>--- Free Agents ---</MenuItem>\n                    {available}\n                </Select>\n            </FormControl>\n        </EntityCardTemplate>\n    );\n};\n\n\ninterface Props {\n    project: string;\n}\n\n\nexport default EntityAdd;\n","import React from 'react';\n\nimport FormControl from '@mui/material/FormControl';\nimport InputLabel from '@mui/material/InputLabel';\nimport MenuItem from '@mui/material/MenuItem';\nimport Select from '@mui/material/Select';\n\nimport {useSelector} from '../../redux';\nimport type {IAgent} from '../../utils/interfaces';\nimport type {SelectChangeEvent} from '@mui/material/Select';\n\n\nconst EntityAgent: React.FC<Props> = (props) => {\n    const {project, jobs, agent, onAgentChange} = props;\n    const agents = useSelector((state) => state.openbach.agents);\n\n    const handleAgentChange = React.useCallback((event: SelectChangeEvent) => {\n        const address = event.target.value;\n        onAgentChange(address ? agents?.find((a: IAgent) => a.address === address) : undefined);\n    }, [agents, onAgentChange]);\n\n    const reserved = React.useMemo(() => (agents || []).filter(\n        (a: IAgent) => a.reserved === project && (!a.project || a.address === agent?.address)\n    ).map((agent: IAgent) => (\n        <MenuItem key={agent.address} value={agent.address}>{agent.name}</MenuItem>\n    )), [agents, project, agent]);\n\n    const available = React.useMemo(() => (agents || []).filter(\n        (a: IAgent) => !a.reserved && (!a.project || a.address === agent?.address)\n    ).map((agent: IAgent) => (\n        <MenuItem key={agent.address} value={agent.address}>{agent.name}</MenuItem>\n    )), [agents, agent]);\n\n    const selector = (\n        <FormControl fullWidth>\n            <InputLabel id=\"entity-change-label\">Associated Agent</InputLabel>\n            <Select\n                labelId=\"entity-change-label\"\n                id=\"entity-change-select\"\n                label=\"Associated Agent\"\n                value={agent?.address || \"\"}\n                onChange={handleAgentChange}\n            >\n                <MenuItem value=\"\" />\n                <MenuItem>--- Agents reserved for this project ---</MenuItem>\n                {reserved}\n                <MenuItem>--- Free Agents ---</MenuItem>\n                {available}\n            </Select>\n        </FormControl>\n    );\n\n    if (!agent) {\n        return selector;\n    }\n\n    const globalAgent = agents?.find((a: IAgent) => a.address === agent.address);\n\n    const services = globalAgent?.services;\n    const ntp = !services?.hasOwnProperty('ntp.service') ? \"\" : services['ntp.service'].split(/\\r?\\n/).find(\n        (s: string) => s.startsWith('*')\n    );\n    const status = ntp === \"\" ? \"NTP status not fetched\" : !ntp ? \"NTP not synchronized\" : (\n        \"NTP offset: \" + ntp.split(/\\s+/)[8] + \" ms\"\n    );\n    \n    const errors = globalAgent?.errors;\n\n    return (\n        <ul>\n            <li>{selector}</li>\n            <li>IP used for installation: <b>{agent.address}</b></li>\n            <li>Collector: <b>{agent.collector_ip}</b></li>\n            <li>Installed jobs: {jobs.length ? (\n                <ul>\n                    {jobs.map((j: string) => <li key={j}>{j}</li>)}\n                </ul>\n            ) : \"No jobs installed\"}</li>\n            <li>{status}</li>\n            {errors && errors.length > 0 && <li>\n                <ul>\n                    {errors.map((e, index: number) => <li key={index}>{e.msg}</li>)}\n                </ul>\n            </li>}\n        </ul>\n    );\n};\n\n\ninterface Props {\n    jobs: string[];\n    project: string;\n    agent?: IAgent;\n    onAgentChange: (agent?: IAgent) => void;\n}\n\n\nexport default EntityAgent;\n","import React from 'react';\n\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport Chip from '@mui/material/Chip';\nimport FormControl from '@mui/material/FormControl';\nimport MenuItem from '@mui/material/MenuItem';\nimport Select from '@mui/material/Select';\n\nimport {installOnAgents, uninstallOnAgents} from '../../api/jobs';\nimport {useDispatch} from '../../redux';\nimport {addJobAction} from '../../redux/project';\nimport type {SelectChangeEvent} from '@mui/material/Select';\n\n\nconst JobActionSelector: React.FC<React.PropsWithChildren<Props>> = (props) => {\n    const {options, action, agent} = props;\n    const dispatch = useDispatch();\n    const [selected, storeSelected] = React.useState<string[]>([]);\n\n    const handleChange = React.useCallback((event: SelectChangeEvent<typeof selected>) => {\n        const {value} = event.target;\n        storeSelected(typeof value === 'string' ? [] : value);\n    }, []);\n\n    const handleAction = React.useCallback(() => {\n        if (selected.length) {\n            switch (action) {\n                case \"install\":\n                    dispatch(installOnAgents({jobNames: selected, agents: [agent]}));\n                    break;\n                case \"uninstall\":\n                    dispatch(uninstallOnAgents({jobNames: selected, agents: [agent]}));\n                    break;\n                default:\n                    storeSelected([]);\n                    return;\n            }\n            selected.forEach((job: string) => {dispatch(addJobAction({job, agent, action}));});\n            setTimeout(() => {\n                window.scrollTo({top: document.body.scrollHeight, left: 0, behavior: \"smooth\"});\n            }, 50);\n        }\n        storeSelected([]);\n    }, [selected, action, agent, dispatch]);\n\n    React.useEffect(() => {\n        storeSelected([]);\n    }, [options]);\n    \n    return (\n        <Box display=\"flex\" alignItems=\"center\" width=\"100%\" gap={1}>\n            <Button\n                variant=\"contained\"\n                color=\"secondary\"\n                onClick={handleAction}\n            >\n                {action} jobs\n            </Button>\n            <FormControl sx={{flexGrow: 1}}>\n                <Select\n                    multiple\n                    fullWidth\n                    value={selected}\n                    onChange={handleChange}\n                    renderValue={(values) => (\n                        <Box sx={{display: 'flex', flexWrap: 'wrap', gap: 0.5}}>\n                            {values.map((value) => (\n                                <Chip key={value} label={value} />\n                            ))}\n                        </Box>\n                    )}\n                >\n                    {options.map((value) => (\n                        <MenuItem key={value} value={value}>{value}</MenuItem>\n                    ))}\n                </Select>\n            </FormControl>\n        </Box>\n    );\n};\n\n\ninterface Props {\n    agent: string;\n    action: \"install\" | \"uninstall\";\n    options: string[];\n}\n\n\nexport default JobActionSelector;\n","import React from 'react';\n\nimport Button from '@mui/material/Button';\n\nimport EntityAgent from './EntityAgent';\nimport EntityCardTemplate from './EntityCardTemplate';\nimport JobActionSelector from './JobActionSelector';\n\nimport {getJobs} from '../../api/agents';\nimport {removeEntity, updateEntityAgent} from '../../api/entities';\nimport {useDispatch, useSelector} from '../../redux';\nimport type {IAgent, IJob, IEntity, INetwork} from '../../utils/interfaces';\n\n\nconst image = process.env.PUBLIC_URL + '/assets/server.svg';\n\n\nconst EntityCard: React.FC<Props> = (props) => {\n    const {project, entity: {name, description, agent, networks}, onRemove} = props;\n    const jobs = useSelector((state) => state.openbach.jobs);\n    const dispatch = useDispatch();\n    const [installedJobs, storeInstalledJobs] = React.useState<string[]>([]);\n\n    const handleRemoveEntity = React.useCallback(() => {\n        dispatch(removeEntity({project, name}));\n        onRemove();\n    }, [project, name, dispatch, onRemove]);\n\n    const handleAgentChange = React.useCallback((agent?: IAgent) => {\n        dispatch(updateEntityAgent({project, name, description, agent, networks}));\n    }, [project, name, description, networks, dispatch]);\n\n    const linkedNetworks = React.useMemo(() => {\n        return (networks || []).map((network: INetwork) => (\n            <li key={network.interface}>{network.interface}: {network.ip} (network {network.name})</li>\n        ));\n    }, [networks]);\n\n    React.useEffect(() => {\n        if (agent) {\n            const {address} = agent;\n            const promise = dispatch(getJobs({address}))\n            promise.unwrap().then((payload) => {storeInstalledJobs(payload);});\n            return () => {promise.abort();};\n        }\n    }, [agent, dispatch]);\n\n    const action = (\n        <Button\n            variant=\"contained\"\n            color=\"secondary\"\n            onClick={handleRemoveEntity}\n        >\n            Remove Entity\n        </Button>\n    );\n\n    return (\n        <EntityCardTemplate\n            title=\"Entity\"\n            subtitle=\"Click on an entity to select it\"\n            media={image}\n            actions={agent ? (\n                <React.Fragment>\n                    <JobActionSelector\n                        agent={agent.address}\n                        action=\"install\"\n                        options={(jobs || []).filter((job: IJob) => !installedJobs.includes(job.general.name)).map((job: IJob) => job.general.name)}\n                    />\n                    <JobActionSelector\n                        agent={agent.address}\n                        action=\"uninstall\"\n                        options={installedJobs}\n                    />\n                    {action}\n                </React.Fragment>\n            ) : action}\n        >\n            <ul>\n                <li>Description: <b>{description}</b></li>\n                <li>OS: <b>Linux</b></li>\n                <li>Interfaces: <ul>{linkedNetworks}</ul></li>\n                <li>Agent:\n                    <EntityAgent\n                        jobs={installedJobs}\n                        agent={agent}\n                        project={project}\n                        onAgentChange={handleAgentChange}\n                    />\n                </li>\n            </ul>\n        </EntityCardTemplate>\n    );\n};\n\n\ninterface Props {\n    project: string;\n    entity: IEntity;\n    onRemove: () => void;\n}\n\n\nexport default EntityCard;\n","import React from 'react';\n\nimport Button from '@mui/material/Button';\nimport TextField from '@mui/material/TextField';\n\nimport EntityCardTemplate from './EntityCardTemplate';\n\nimport {updateProject, refreshTopology} from '../../api/projects';\nimport {useDispatch, useSelector} from '../../redux';\nimport {setMessage} from '../../redux/message';\nimport type {INetwork} from '../../utils/interfaces';\n\n\nconst image = process.env.PUBLIC_URL + '/assets/cloud.svg';\n\n\nconst NetworkCard: React.FC<Props> = (props) => {\n    const {network: {name, address}, onChange} = props;\n    const project = useSelector((state) => state.project.current);\n    const dispatch = useDispatch();\n    const [newName, storeNewName] = React.useState<string>(name);\n\n    const handleNameChange = React.useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n        storeNewName(event.target.value);\n    }, []);\n\n    const handleRename = React.useCallback(() => {\n        if (project) {\n            dispatch(refreshTopology({project: project.name, newName: {name: newName, address}}));\n        }\n    }, [project, address, newName, dispatch]);\n\n    const handleHideNetwork = React.useCallback(() => {\n        if (project) {\n            dispatch(setMessage(\"Updating Topology, please wait!\"));\n            const hidden_network = [...project.hidden_network, address];\n            dispatch(updateProject({name: project.name, project: {...project, hidden_network}}));\n            onChange();\n        }\n    }, [project, address, dispatch, onChange]);\n\n    return (\n        <EntityCardTemplate\n            title={name}\n            subtitle={address}\n            media={image}\n            actions={\n                <React.Fragment>\n                    <Button\n                        variant=\"contained\"\n                        color=\"secondary\"\n                        disabled={!name || name === newName}\n                        onClick={handleRename}\n                    >\n                        Change Name\n                    </Button>\n                    <Button\n                        variant=\"contained\"\n                        color=\"secondary\"\n                        onClick={handleHideNetwork}\n                    >\n                        Hide Network\n                    </Button>\n                </React.Fragment>\n            }\n        >\n            <p>Network {address}</p>\n            <TextField\n                required\n                margin=\"dense\"\n                variant=\"standard\"\n                label=\"Name\"\n                value={newName}\n                onChange={handleNameChange}\n                fullWidth\n            />\n        </EntityCardTemplate>\n    );\n};\n\n\ninterface Props {\n    network: INetwork;\n    onChange: () => void;\n}\n\n\nexport default NetworkCard;\n","import React from 'react';\n\nimport Box from '@mui/material/Box';\nimport Fab from '@mui/material/Fab';\n\nimport ContentClear from '@mui/icons-material/Clear';\n\nimport EntityAdd from './EntityAdd';\nimport EntityCard from './EntityCard';\nimport NetworkCard from './NetworkCard';\n\nimport type {IEntity, INetwork} from '../../utils/interfaces';\n\n\nconst EntityManager: React.FC<Props> = (props) => {\n    const {project, selectedEntity, selectedNetwork, onUnselect} = props;\n\n    const card = selectedEntity ? (\n        <EntityCard\n            entity={selectedEntity}\n            project={project}\n            onRemove={onUnselect}\n        />\n    ) : selectedNetwork ? (\n        <NetworkCard\n            network={selectedNetwork}\n            onChange={onUnselect}\n        />\n    ) : (\n        <EntityAdd project={project} />\n    );\n\n    return (\n        <Box display=\"inline-block\" width=\"30%\" position=\"relative\">\n            {(selectedEntity != null || selectedNetwork != null) && <Fab\n                color=\"primary\"\n                size=\"medium\"\n                onClick={onUnselect}\n                sx={{position: \"absolute\", top: \"-16px\", right: \"-16px\"}}\n            >\n                <ContentClear />\n            </Fab>}\n            {card}\n        </Box>\n    );\n};\n\n\ninterface Props {\n    project: string;\n    entities: IEntity[];\n    selectedEntity?: IEntity;\n    selectedNetwork?: INetwork;\n    onUnselect: () => void;\n}\n\n\nexport default EntityManager;\n","import React from 'react';\n\nimport {grey, green, red} from '@mui/material/colors';\n\nimport RunningIcon from '@mui/icons-material/Autorenew';\nimport BadStatusIcon from '@mui/icons-material/HighlightOff';\nimport CheckCircleIcon from '@mui/icons-material/CheckCircle';\nimport UnknownIcon from '@mui/icons-material/HelpOutline';\n\nimport {IJobStateStatus} from '../../utils/interfaces';\n\n\nconst JobStateIcon: React.FC<Props> = (props) => {\n    if (!props.status) {\n        return <UnknownIcon sx={{color: grey[500]}} />;\n    }\n\n    const {returncode} = props.status;\n    if (!returncode) {\n        return <UnknownIcon sx={{color: red[500]}} />;\n    }\n\n    if (returncode === 202) {\n        return <RunningIcon sx={{color: \"#2A72A9\"}} />;\n    } else if (returncode < 400) {\n        return <CheckCircleIcon sx={{color: green[500]}} />;\n    } else {\n        return <BadStatusIcon sx={{color: red[500]}} />;\n    }\n};\n\n\ninterface Props {\n    status?: IJobStateStatus;\n}\n\n\nexport default JobStateIcon;\n","import React from 'react';\n\nimport ListItemButton from '@mui/material/ListItemButton';\nimport ListItemIcon from '@mui/material/ListItemIcon';\nimport ListItemText from '@mui/material/ListItemText';\n\nimport JobStateIcon from '../common/JobStateIcon';\n\nimport {stateJob} from '../../api/jobs';\nimport {getAgents} from '../../api/agents';\nimport {useDispatch} from '../../redux';\nimport type {IJobState, IJobStateStatus} from '../../utils/interfaces';\n\n\nconst JobsStatusesQuery: React.FC<Props> = (props) => {\n    const {job: jobName, agent, action, status, onClick} = props;\n    const dispatch = useDispatch();\n\n    const title = React.useMemo(() => `${action}ing ${jobName} on ${agent}`, [action, jobName, agent]);\n\n    const handleRefresh = React.useCallback(() => {\n        dispatch(stateJob({jobName, agent}));\n    }, [jobName, agent, dispatch]);\n\n    const handleClick = React.useCallback(() => {\n        const content = !status\n            ? \"Operation not started yet!\"\n            : !status.response\n            ? \"Operation successful!\"\n            : status.response.state\n            ? \"Operation \" + status.response.state\n            : status.response.response\n            ? JSON.stringify(status.response.response)\n            : \"Format of the response is unknown. Return code was \" + status.response.returncode;\n        onClick(title, content);\n    }, [title, status, onClick]);\n\n    React.useEffect(() => {\n        if (!status || status.returncode === 202) {\n            const timeout = setTimeout(handleRefresh, 1000);\n            return () => {clearTimeout(timeout);};\n        } else if (status && status.returncode !== 202) {\n            const promise = dispatch(getAgents({services: false}));\n            return () => {promise.abort();};\n        }\n    }, [status, handleRefresh, dispatch]);\n\n    return (\n        <ListItemButton onClick={handleClick}>\n            <ListItemIcon>\n                <JobStateIcon status={status} />\n            </ListItemIcon>\n            <ListItemText primary={title} />\n        </ListItemButton>\n    );\n};\n\n\ninterface Props {\n    job: string;\n    agent: string;\n    action: keyof IJobState;\n    status?: IJobStateStatus;\n    onClick: (title: string, content: string) => void;\n}\n\n\nexport default JobsStatusesQuery;\n","import React from 'react';\n\nimport List from '@mui/material/List';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogContentText from '@mui/material/DialogContentText';\n\nimport JobsStatusesQuery from './JobsStatusesQuery';\nimport Dialog from '../common/ActionDialog';\n\nimport {useSelector} from '../../redux';\n\n\nconst JobsStatusesInfos: React.FC<Props> = (props) => {\n    const queries = useSelector((state) => state.project.jobActions);\n    const [title, storeTitle] = React.useState<string>(\"\");\n    const [content, storeContent] = React.useState<string>(\"\");\n\n    const handleOpen = React.useCallback((title: string, content: string) => {\n        storeTitle(title);\n        storeContent(content);\n    }, []);\n\n    const handleClose = React.useCallback(() => {\n        storeTitle(\"\");\n        storeContent(\"\");\n    }, []);\n\n    return (\n        <React.Fragment>\n            <List>\n                {queries.map((query) => (\n                    <JobsStatusesQuery\n                        key={`${query.job}-on-${query.agent}`}\n                        job={query.job}\n                        agent={query.agent}\n                        action={query.action}\n                        status={query.result && query.result[query.action]}\n                        onClick={handleOpen}\n                    />\n                ))}\n            </List>\n            <Dialog\n                title={title}\n                open={!(!title && !content)}\n                cancel={{label: \"OK\", action: handleClose}}\n                actions={[]}\n            >\n                <DialogContent>\n                    <DialogContentText>\n                        {content}\n                    </DialogContentText>\n                </DialogContent>\n            </Dialog>\n        </React.Fragment>\n    );\n};\n\n\ninterface Props {\n}\n\n\nexport default JobsStatusesInfos;\n","import React from 'react';\n\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport Chip from '@mui/material/Chip';\nimport FormControl from '@mui/material/FormControl';\nimport MenuItem from '@mui/material/MenuItem';\nimport Select from '@mui/material/Select';\n\nimport type {SelectChangeEvent} from '@mui/material/Select';\n\n\nconst ProjectMiscellaneousSelect: React.FC<Props> = (props) => {\n    const {title, label, initial, options, canDoAction, onAction} = props;\n    const [selected, storeSelected] = React.useState<string[]>([]);\n\n    const handleChange = React.useCallback((event: SelectChangeEvent<typeof selected>) => {\n        const {value} = event.target;\n        storeSelected(typeof value === 'string' ? [] : value);\n    }, []);\n\n    const handleClick = React.useCallback(() => {\n        onAction(selected);\n    }, [selected, onAction]);\n\n    React.useEffect(() => {\n        storeSelected(initial);\n    }, [initial]);\n\n    return (\n        <Box display=\"flex\" alignItems=\"center\">\n            <p>{title}</p>\n            <FormControl size=\"small\" sx={{flexGrow: 1, margin: \"0 5px\"}}>\n                <Select\n                    multiple\n                    fullWidth\n                    value={selected}\n                    onChange={handleChange}\n                    renderValue={(values) => (\n                        <Box sx={{display: 'flex', flexWrap: 'wrap', gap: 0.5}}>\n                            {values.map((value) => (\n                                <Chip key={value} label={value} />\n                            ))}\n                        </Box>\n                    )}\n                >\n                    {options.map((value) => (\n                        <MenuItem key={value} value={value}>{value}</MenuItem>\n                    ))}\n                </Select>\n            </FormControl>\n            <Button\n                variant=\"contained\"\n                color=\"secondary\"\n                disabled={!canDoAction}\n                onClick={handleClick}\n            >\n                {label}\n            </Button>\n        </Box>\n    );\n};\n\n\ninterface Props {\n    title: string;\n    label: string;\n    initial: string[];\n    options: string[];\n    canDoAction: boolean;\n    onAction: (values: string[]) => void;\n}\n\n\nexport default ProjectMiscellaneousSelect;\n","import React from 'react';\nimport {useNavigate} from 'react-router';\n\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogContentText from '@mui/material/DialogContentText';\n\nimport Dialog from '../common/ActionDialog';\nimport DownloadButton from '../common/DownloadButton';\nimport JsonEditor from '../common/JsonEditor';\nimport Topology from '../common/Topology';\nimport Entity from '../Entities/EntityManager';\nimport JobsStatusesInfos from '../Entities/JobsStatusesInfos';\nimport Select from './ProjectMiscellaneousSelect';\n\nimport {getAgents} from '../../api/agents';\nimport {deleteProject, updateProject, refreshTopology} from '../../api/projects';\nimport {useDispatch, useSelector} from '../../redux';\nimport {setMessage} from '../../redux/message';\nimport type {IProject, IEntity, INetwork} from '../../utils/interfaces';\nimport type {TopologyNode, TopologyLink} from '../common/Topology';\n\n\nconst miscellaneousStyle = {margin: \"0 15px 10px\"};\n\n\nconst ProjectDetails: React.FC<Props> = (props) => {\n    const project = useSelector((state) => state.project.current);\n    const isAdmin = useSelector((state) => state.login.is_admin);\n    const isUser = useSelector((state) => state.login.is_user);\n    const dispatch = useDispatch();\n    const navigate = useNavigate();\n    const [open, storeOpen] = React.useState<boolean>(false);\n    const [selectedEntity, storeSelectedEntity] = React.useState<IEntity>();\n    const [selectedNetwork, storeSelectedNetwork] = React.useState<INetwork>();\n\n    const handleOpen = React.useCallback(() => {\n        storeOpen(true);\n    }, []);\n\n    const handleClose = React.useCallback(() => {\n        storeOpen(false);\n    }, []);\n\n    const handleUnselect = React.useCallback(() => {\n        storeSelectedEntity(undefined);\n        storeSelectedNetwork(undefined);\n    }, []);\n\n    const handleSelect = React.useCallback((node: TopologyNode) => {\n        if (project) {\n            if (node.type === \"network\") {\n                storeSelectedEntity(undefined);\n                storeSelectedNetwork(project.network.find((network: INetwork) => network.address === node.id));\n            } else if (node.type === \"entity\") {\n                storeSelectedEntity(project.entity.find((entity: IEntity) => entity.name === node.id));\n                storeSelectedNetwork(undefined);\n            } else {\n                storeSelectedEntity(undefined);\n                storeSelectedNetwork(undefined);\n            }\n        }\n    }, [project]);\n\n    const handleFetchNtp = React.useCallback(() => {\n        dispatch(setMessage(\"Fetching Agents statusses. Please wait...\"));\n        dispatch(getAgents({services: true}));\n    }, [dispatch]);\n\n    const handleUpdateOwners = React.useCallback((owners: string[]) => {\n        if (project) {\n            dispatch(updateProject({name: project.name, project: {...project, owners}}));\n        }\n    }, [project, dispatch]);\n\n    const handleShowNetworks = React.useCallback((showNetworks: string[]) => {\n        if (project) {\n            const hidden_network = project.hidden_network.filter(\n                (name: string) => !showNetworks.includes(name)\n            );\n            dispatch(setMessage(\"Updating Topology, please wait!\"));\n            dispatch(updateProject({name: project.name, project: {...project, hidden_network}}));\n        }\n    }, [project, dispatch]);\n\n    const handleRefreshTopology = React.useCallback(() => {\n        if (project) {\n            dispatch(refreshTopology({project: project.name}));\n        }\n    }, [project, dispatch]);\n\n    const handleProjectUpdate = React.useCallback((json: string) => {\n        if (project) {\n            const update = JSON.parse(json) as IProject;\n            dispatch(updateProject({name: project.name, project: update}));\n        }\n    }, [project, dispatch]);\n\n    const handleDeleteProject = React.useCallback(() => {\n        if (project) {\n            dispatch(deleteProject({name: project.name})).unwrap().then(() => navigate('/app'));\n        }\n        handleClose();\n    }, [project, handleClose, dispatch, navigate]);\n\n    const [links, nodes] = React.useMemo(() => {\n        const projectLinks: TopologyLink[] = [];\n        if (!project) {\n            return [projectLinks, []];\n        }\n\n        const networkNodes: TopologyNode[] = project.network.map((network: INetwork) => ({\n            name: network.name,\n            id: network.address,\n            type: \"network\",\n            color: network.address.startsWith(\"imported:\") ? \"tomato\" : undefined,\n        }));\n        \n        const entityNodes: TopologyNode[] = project.entity.map((entity: IEntity) => {\n            const node: TopologyNode = {\n                name: entity.name,\n                id: entity.name,\n                type: \"entity\",\n                color: entity.agent ? \"green\" : \"black\",\n            };\n            entity.networks?.forEach((network: INetwork) => {\n                const target = networkNodes.find((n) => n.id === network.address);\n                if (target) {projectLinks.push({source: node, target, weight: 3});}\n            });\n            return node;\n        });\n\n        return [projectLinks, entityNodes.concat(networkNodes)];\n    }, [project]);\n\n    if (!project) {\n        return null;\n    }\n\n    const canRestricted = isAdmin || (!project.owners?.length && isUser);\n    const users = [...project.owners];\n\n    return (\n        <React.Fragment>\n            <h1>Project '{project.name}'</h1>\n            <Box mb=\"8px\" pb=\"8px\">\n                {project.description.split(\"\\n\").map((line: string, index: number) => (\n                    <p key={index}>{line}</p>\n                ))}\n            </Box>\n            <Select\n                title=\"Project Owners\"\n                label=\"Share\"\n                initial={project.owners}\n                options={users}\n                canDoAction={canRestricted}\n                onAction={handleUpdateOwners}\n            />\n            <Select\n                title=\"Hidden Networks\"\n                label=\"Show\"\n                initial={project.hidden_network}\n                options={project.hidden_network}\n                canDoAction={isUser}\n                onAction={handleShowNetworks}\n            />\n            <Box display=\"flex\" alignItems=\"center\" justifyContent=\"center\">\n                <Button\n                    variant=\"contained\"\n                    color=\"secondary\"\n                    disabled={!isUser}\n                    onClick={handleRefreshTopology}\n                    sx={miscellaneousStyle}\n                >\n                    Refresh Topology\n                </Button>\n                <Button\n                    variant=\"contained\"\n                    color=\"secondary\"\n                    disabled={!isUser}\n                    onClick={handleFetchNtp}\n                    sx={miscellaneousStyle}\n                >\n                    Fetch NTP Offset\n                </Button>\n                <DownloadButton\n                    route={`/project/${project.name}`}\n                    filename={`${project.name}.json`}\n                    label=\"Project\"\n                    sx={miscellaneousStyle}\n                />\n                <JsonEditor\n                    label=\"Project\"\n                    initial={project}\n                    onUpdate={handleProjectUpdate}\n                    disabled={!isUser}\n                    sx={miscellaneousStyle}\n                />\n                <Button\n                    variant=\"contained\"\n                    color=\"secondary\"\n                    disabled={!canRestricted}\n                    onClick={handleOpen}\n                    sx={miscellaneousStyle}\n                >\n                    Delete Project\n                </Button>\n            </Box>\n            <h1>Topology</h1>\n            <Box display=\"flex\" alignItems=\"flex-start\">\n                <Box display=\"inline-block\" width=\"70%\">\n                    <Topology\n                        height=\"800px\"\n                        nodes={nodes}\n                        links={links}\n                        selectedNode={handleSelect}\n                        unselectNode={handleUnselect}\n                    />\n                </Box>\n                <Entity\n                    entities={project.entity}\n                    project={project.name}\n                    selectedEntity={selectedEntity}\n                    selectedNetwork={selectedNetwork}\n                    onUnselect={handleUnselect}\n                />\n            </Box>\n            <JobsStatusesInfos />\n            <Dialog\n                title=\"Are you sure?\"\n                open={open}\n                cancel={{label: \"Cancel\", action: handleClose}}\n                actions={[{label: \"Delete\", action: handleDeleteProject}]}\n            >\n                <DialogContent>\n                    <DialogContentText>\n                        Deleting the project {project.name} is irreversible. Proceed anyways?\n                    </DialogContentText>\n                </DialogContent>\n            </Dialog>\n        </React.Fragment>\n    );\n};\n\n\ninterface Props {\n}\n\n\nexport default ProjectDetails;\n","import React from 'react';\nimport {useParams, useNavigate} from 'react-router';\nimport {useForm, Controller} from 'react-hook-form';\n\nimport Button from '@mui/material/Button';\nimport Card from '@mui/material/Card';\nimport CardActions from '@mui/material/CardActions';\nimport CardContent from '@mui/material/CardContent';\nimport TextField from '@mui/material/TextField';\n\nimport {addScenario} from '../../api/scenarios';\nimport {useDispatch} from '../../redux';\n\n\nconst CreateScenarioCard: React.FC<Props> = (props) => {\n    const {projectId: project} = useParams();\n    const dispatch = useDispatch();\n    const navigate = useNavigate();\n    const {control, handleSubmit, reset, formState: {isValid}} = useForm<FormData>({mode: 'onBlur'});\n\n    const onSubmit = React.useCallback(({scenario}: FormData) => {\n        if (project) {\n            dispatch(addScenario({project, scenario}))\n                .unwrap()\n                .then(() => {navigate(`/app/project/${project}/scenario/${scenario}`);});\n            reset();\n        }\n    }, [project, dispatch, navigate, reset]);\n\n    return (\n        <Card sx={{flexGrow: 1}}>\n            <form onSubmit={handleSubmit(onSubmit)}>\n                <CardContent>\n                    <h1>Create Scenario</h1>\n                    <Controller\n                        name=\"scenario\"\n                        control={control}\n                        rules={{required: true}}\n                        defaultValue=\"\"\n                        render={({field: {onChange, onBlur, value, ref}}) => (\n                            <TextField\n                                required\n                                margin=\"dense\"\n                                variant=\"standard\"\n                                label=\"Scenario Name\"\n                                onChange={onChange}\n                                onBlur={onBlur}\n                                value={value}\n                                inputRef={ref}\n                                fullWidth\n                            />\n                        )}\n                    />\n                </CardContent>\n                <CardActions>\n                    <Button color=\"secondary\" variant=\"contained\" type=\"submit\" disabled={!isValid}>\n                        New Scenario\n                    </Button>\n                </CardActions>\n            </form>\n        </Card>\n    );\n};\n\n\ninterface Props {\n}\n\n\ninterface FormData {\n    scenario: string;\n}\n\n\nexport default CreateScenarioCard;\n","import React from 'react';\nimport {useParams, useNavigate} from 'react-router';\nimport {useForm} from 'react-hook-form';\n\nimport Button from '@mui/material/Button';\nimport Card from '@mui/material/Card';\nimport CardActions from '@mui/material/CardActions';\nimport CardContent from '@mui/material/CardContent';\n\nimport UploadButton from '../common/FileUploadButton';\n\nimport {importScenario} from '../../api/scenarios';\nimport {useDispatch} from '../../redux';\n\n\nconst ImportScenarioCard: React.FC<Props> = (props) => {\n    const {projectId: project} = useParams();\n    const dispatch = useDispatch();\n    const navigate = useNavigate();\n    const {handleSubmit, register, reset, formState: {isValid}} = useForm<FormData>({mode: 'onBlur'});\n\n    const onSubmit = React.useCallback(({scenario}: FormData) => {\n        if (project) {\n            dispatch(importScenario({project, scenario: scenario[0]}))\n                .unwrap()\n                .then(({name}) => {navigate(`/app/project/${project}/scenario/${name}`);});\n            reset();\n        }\n    }, [project, dispatch, reset, navigate]);\n\n    return (\n        <Card sx={{flexGrow: 1}}>\n            <form onSubmit={handleSubmit(onSubmit)}>\n                <CardContent>\n                    <h1>Import Scenario</h1>\n                    <UploadButton\n                        label=\"Scenario's File\"\n                        accept=\".json\"\n                        required\n                        name=\"scenario\"\n                        register={register}\n                        options={{required: true}}\n                    />\n                </CardContent>\n                <CardActions>\n                    <Button color=\"secondary\" variant=\"contained\" type=\"submit\" disabled={!isValid}>\n                        Import Scenario\n                    </Button>\n                </CardActions>\n            </form>\n        </Card>\n    );\n};\n\n\ninterface Props {\n}\n\n\ninterface FormData {\n    scenario: FileList;\n}\n\n\nexport default ImportScenarioCard;\n","import React from 'react';\n\nimport Tooltip from '@mui/material/Tooltip';\n\nimport {lightGreen} from '@mui/material/colors';\nimport Play from '@mui/icons-material/PlayCircleFilled';\n\n\nconst LaunchScenarioIcon: React.FC<Props> = (props) => {\n    const {title = \"Launch\"} = props;\n\n    return (\n        <Tooltip title={title} placement=\"top-start\">\n            <Play sx={{color: lightGreen[500]}} />\n        </Tooltip>\n    );\n};\n\n\ninterface Props {\n    title?: string;\n}\n\n\nexport default LaunchScenarioIcon;\n","import React from 'react';\nimport {Link} from 'react-router-dom';\n\nimport IconButton from '@mui/material/IconButton';\nimport ListItemButton from '@mui/material/ListItemButton';\nimport ListItemIcon from '@mui/material/ListItemIcon';\nimport ListItemSecondaryAction from '@mui/material/ListItemSecondaryAction';\nimport ListItemText from '@mui/material/ListItemText';\n\nimport Delete from '../common/DeleteIcon';\nimport LaunchScenario from '../common/LaunchScenarioIcon';\n\nimport {useSelector} from '../../redux';\nimport {IScenario} from '../../utils/interfaces';\n\n\nconst ScenariosListItem: React.FC<Props> = (props) => {\n    const {scenario: {name, openbach_functions, arguments: args}, onDelete, onLaunch} = props;\n    const project = useSelector((state) => state.project.current);\n\n    const handleStartScenario = React.useCallback((event: React.MouseEvent) => {\n        event.preventDefault();\n        event.stopPropagation();\n        onLaunch({scenario: name, args: Object.keys(args)});\n    }, [name, args, onLaunch]);\n\n    const handleDelete = React.useCallback((event: React.MouseEvent) => {\n        event.preventDefault();\n        event.stopPropagation();\n        onDelete(name);\n    }, [onDelete, name]);\n\n    const length = openbach_functions.length;\n    const secondary = `${length} openbach function${length > 1 ? \"s\" : \"\"}`;\n\n    return (\n        <ListItemButton component={Link} to={`/app/project/${project?.name}/scenario/${name}`} disableRipple>\n            <ListItemIcon onClick={handleStartScenario}>\n                <LaunchScenario />\n            </ListItemIcon>\n            <ListItemText primary={name} secondary={secondary} />\n            <ListItemSecondaryAction>\n                <IconButton edge=\"end\" onClick={handleDelete}>\n                    <Delete />\n                </IconButton>\n            </ListItemSecondaryAction>\n        </ListItemButton>\n    );\n};\n\n\ninterface Props {\n    scenario: IScenario;\n    onLaunch: (scenario: {scenario: string; args: string[];}) => void;\n    onDelete: (name: string) => void;\n}\n\n\nexport default ScenariosListItem;\n","import React from 'react';\nimport {useParams, useNavigate} from 'react-router';\n\nimport Box from '@mui/material/Box';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogContentText from '@mui/material/DialogContentText';\nimport Divider from '@mui/material/Divider';\nimport List from '@mui/material/List';\n\nimport CreateScenario from './CreateScenarioCard';\nimport ImportScenario from './ImportScenarioCard';\nimport ScenariosListItem from './ScenariosListItem';\nimport ScenarioLaunchDialog from './ScenarioLaunchDialog';\nimport Dialog from '../common/ActionDialog';\n\nimport {deleteScenario} from '../../api/scenarios';\nimport {useDispatch, useSelector} from '../../redux';\nimport {IScenario} from '../../utils/interfaces';\n\n\nconst ScenariosList: React.FC<Props> = (props) => {\n    const {scenarioId} = useParams();\n    const project = useSelector((state) => state.project.current);\n    const favorites = useSelector((state) => state.login.favorites);\n    const dispatch = useDispatch();\n    const navigate = useNavigate();\n    const [scenarioToDelete, storeScenarioToDelete] = React.useState<string>();\n    const [scenarioToLaunch, storeScenarioToLaunch] = React.useState<Launch>();\n\n    const handleOpenLaunch = React.useCallback((scenario: Launch) => {\n        storeScenarioToLaunch(scenario);\n    }, []);\n\n    const handleCloseLaunch = React.useCallback(() => {\n        storeScenarioToLaunch(undefined);\n    }, []);\n\n    const handleOpenDelete = React.useCallback((name: string) => {\n        storeScenarioToDelete(name);\n    }, []);\n\n    const handleCloseDelete = React.useCallback(() => {\n        storeScenarioToDelete(undefined);\n    }, []);\n\n    const handleDelete = React.useCallback(() => {\n        if (project?.name && scenarioToDelete) {\n            dispatch(deleteScenario({project: project.name, scenario: scenarioToDelete}))\n                .unwrap()\n                .then(() => {if (scenarioToDelete === scenarioId) {navigate('/app/project/' + project.name);}});\n        }\n        handleCloseDelete();\n    }, [project, scenarioToDelete, scenarioId, handleCloseDelete, dispatch, navigate]);\n\n    const prefered = React.useMemo(() => {\n        const projectKey = project?.name;\n        if (!projectKey || !favorites.hasOwnProperty(projectKey)) {\n            return {};\n        }\n\n        return Object.fromEntries(favorites[projectKey].map((key: string) => ([key, true])))\n    }, [favorites, project]);\n\n    const scenarios = React.useMemo(() => {\n        const copy = project?.scenario?.slice() || [];\n        return copy.sort((scenario: IScenario, other: IScenario) => scenario.name.localeCompare(other.name));\n    }, [project]);\n\n    const favoritedScenarios = scenarios.filter(\n        (scenario: IScenario) => prefered[scenario.name]\n    ).map((scenario: IScenario) => (\n        <ScenariosListItem\n            key={scenario.name}\n            scenario={scenario}\n            onLaunch={handleOpenLaunch}\n            onDelete={handleOpenDelete}\n        />\n    ));\n\n    const regularScenarios = scenarios.filter(\n        (scenario: IScenario) => !prefered[scenario.name]\n    ).map((scenario: IScenario) => (\n        <ScenariosListItem\n            key={scenario.name}\n            scenario={scenario}\n            onLaunch={handleOpenLaunch}\n            onDelete={handleOpenDelete}\n        />\n    ));\n\n    const needDivider = favoritedScenarios.length > 0 && 0 < regularScenarios.length;\n    \n    return (\n        <React.Fragment>\n            <List>{favoritedScenarios}</List>\n            {needDivider && <Divider />}\n            <List>{regularScenarios}</List>\n            <Box\n                display=\"flex\"\n                alignItems=\"flex-start\"\n                gap=\"10%\"\n                pl=\"10%\"\n                pr=\"10%\"\n                pt={5}\n                width=\"100%\"\n                boxSizing=\"border-box\"\n            >\n                <CreateScenario />\n                <ImportScenario />\n            </Box>\n            <Dialog\n                title=\"Really Delete this Scenario?\"\n                open={Boolean(scenarioToDelete)}\n                cancel={{label: \"Cancel\", action: handleCloseDelete}}\n                actions={[{label: \"Delete\", action: handleDelete}]}\n            >\n                <DialogContent>\n                    <DialogContentText>\n                        The scenario \"{scenarioToDelete}\" will be deleted. This\n                        action is unrecoverable. Do you want to continue?\n                    </DialogContentText>\n                </DialogContent>\n            </Dialog>\n            {project && scenarioToLaunch && <ScenarioLaunchDialog\n                project={project.name}\n                scenario={scenarioToLaunch.scenario}\n                arguments={scenarioToLaunch.args}\n                onClose={handleCloseLaunch}\n            />}\n        </React.Fragment>\n    );\n};\n\n\ninterface Props {\n}\n\n\ninterface Launch {\n    scenario: string;\n    args: string[];\n}\n\n\nexport default ScenariosList;\n","import React from 'react';\nimport {useParams} from 'react-router';\n\nimport AppBar from '@mui/material/AppBar';\nimport Tab from '@mui/material/Tab';\nimport Tabs from '@mui/material/Tabs';\n\nimport ProjectDetails from './ProjectDetails';\nimport ScenariosList from '../Scenarios/ScenariosList';\nimport ScenarioInstancesList from '../Scenarios/ScenarioInstancesList';\n\nimport {getAgents} from '../../api/agents';\nimport {getJobs} from '../../api/jobs';\nimport {getProject} from '../../api/projects';\nimport {useDispatch} from '../../redux';\nimport {selectNewScenario} from '../../redux/project';\nimport {setTitle} from '../../redux/message';\nimport {breakOutOfMainBody} from '../../utils/theme';\n\n\nconst TabPanel: React.FC<React.PropsWithChildren<TabProps>> = (props) => {\n    const {value, selected, children} = props;\n    const hidden = value !== selected;\n\n    return (\n        <div role=\"tabpanel\" hidden={hidden}>\n            {!hidden && children}\n        </div>\n    );\n};\n\n\nconst Project: React.FC<React.PropsWithChildren<Props>> = (props) => {\n    const {projectId, scenarioId} = useParams();\n    const dispatch = useDispatch();\n    const [selectedTab, storeTab] = React.useState<TabKeys>('project');\n\n    const handleTabChange = React.useCallback((event: React.SyntheticEvent, value: TabKeys) => {\n        storeTab(value);\n    }, []);\n\n    React.useEffect(() => {\n        dispatch(setTitle(`Project '${projectId}'`));\n        if (projectId) {\n            const promise = dispatch(getProject({name: projectId}));\n            return () => {promise.abort();};\n        }\n    }, [dispatch, projectId]);\n\n    React.useEffect(() => {\n        dispatch(selectNewScenario());\n        if (scenarioId) {\n            storeTab(\"selected\");\n        }\n    }, [scenarioId, dispatch]);\n\n    React.useEffect(() => {\n        const promises = [\n            dispatch(getAgents({services: false})),\n            dispatch(getJobs()),\n        ];\n        return () => {promises.forEach((promise) => {promise.abort();});};\n    }, [dispatch]);\n\n    return (\n        <React.Fragment>\n            <AppBar color=\"primary\" sx={{position: \"static\", ...breakOutOfMainBody}}>\n                <Tabs\n                    value={selectedTab}\n                    onChange={handleTabChange}\n                    centered\n                    variant=\"fullWidth\"\n                    textColor=\"inherit\"\n                    indicatorColor=\"secondary\"\n                >\n                    <Tab label=\"Project\" value=\"project\" />\n                    <Tab label=\"Scenarios\" value=\"scenarios\" />\n                    <Tab label=\"Instances\" value=\"instances\" />\n                    <Tab label={scenarioId || \"No Scenario Selected\"} value=\"selected\" disabled={!scenarioId} />\n                </Tabs>\n            </AppBar>\n            <TabPanel value=\"project\" selected={selectedTab}>\n                <ProjectDetails />\n            </TabPanel>\n            <TabPanel value=\"scenarios\" selected={selectedTab}>\n                <ScenariosList />\n            </TabPanel>\n            <TabPanel value=\"instances\" selected={selectedTab}>\n                {projectId && <ScenarioInstancesList project={projectId} />}\n            </TabPanel>\n            <TabPanel value=\"selected\" selected={selectedTab}>\n                {props.children}\n            </TabPanel>\n        </React.Fragment>\n    );\n};\n\n\ninterface Props {\n}\n\n\ninterface TabProps {\n    value: TabKeys;\n    selected: TabKeys;\n}\n\n\ntype TabKeys = \"project\" | \"scenarios\" | \"instances\" | \"selected\";\n\n\nexport default Project;\n","import React from 'react';\nimport * as D3 from 'd3';\n\n\nconst assets = {\n    entity: process.env.PUBLIC_URL + '/assets/server.svg',\n    network: process.env.PUBLIC_URL + '/assets/cloud.svg',\n    project: process.env.PUBLIC_URL + '/assets/project.svg',\n};\n\n\n// Custom Hook\nconst useWindowSize = () => {\n    const [windowSize, storeWindowSize] = React.useState<Partial<WindowSize>>({\n        width: undefined,\n        height: undefined,\n    });\n\n    React.useEffect(() => {\n        const handleResize = () => {storeWindowSize({\n            width: window.innerWidth,\n            height: window.innerHeight,\n        });};\n        window.addEventListener('resize', handleResize);\n\n        // Store initial size right away\n        handleResize();\n\n        return () => window.removeEventListener('resize', handleResize);\n    }, [/* Run only once */]);\n\n    return windowSize;\n};\n\n\nconst Topology: React.FC<Props> = (props) => {\n    const {height, nodes, links, selectedNode, unselectNode} = props;\n    const windowSize = useWindowSize();\n    const svgRef = React.useRef<SVGSVGElement>(null);\n\n    React.useEffect(() => {\n        if (!svgRef.current) {\n            return;\n        }\n\n        while (svgRef.current.children.length > 0) {\n            svgRef.current.children[0].remove();\n        }\n\n        const height = svgRef.current.clientHeight;\n        const width = svgRef.current.clientWidth;\n\n        const simulation = D3.forceSimulation<TopologyNode>(nodes)\n            .force(\"link\", D3.forceLink<TopologyNode, TopologyLink>(links).id((d: TopologyNode) => d.id).strength((d: TopologyLink) => d.weight))\n            .force(\"collide\", D3.forceCollide<TopologyNode>(30))\n            .force(\"center-x\", D3.forceX<TopologyNode>(0))\n            .force(\"center-y\", D3.forceY<TopologyNode>(0))\n            .on(\"tick\", () => {\n                link.attr(\"x1\", (d: TopologyLink) => (d.source as TopologyNode).x as number)\n                    .attr(\"y1\", (d: TopologyLink) => (d.source as TopologyNode).y as number)\n                    .attr(\"x2\", (d: TopologyLink) => (d.target as TopologyNode).x as number)\n                    .attr(\"y2\", (d: TopologyLink) => (d.target as TopologyNode).y as number);\n                node.attr(\"transform\", (d: TopologyNode) => `translate(${d.x}, ${d.y})`);\n            });\n\n        const svg = D3.select(svgRef.current)\n            .attr(\"viewBox\", [-width / 2, -height / 2, width, height])\n            .attr(\"style\", \"max-width: 100%; height: auto; height: intrinsic;\");\n\n        const rect = svg.append(\"rect\")\n            .attr(\"fill\", \"white\")\n            .attr(\"height\", height)\n            .attr(\"width\", width)\n            .attr(\"x\", -width / 2)\n            .attr(\"y\", -height / 2);\n\n        const link = svg.append(\"g\")\n            .attr(\"class\", \"links\")\n            .selectAll(\".link\")\n            .data<TopologyLink>(links)\n            .enter()\n            .append(\"line\")\n            .attr(\"stroke\", \"#AAA\")\n            .attr(\"stroke-width\", (d: TopologyLink) => Math.sqrt(d.weight));\n\n        const node = svg.append(\"g\")\n            .attr(\"class\", \"nodes\")\n            .selectAll(\".node\")\n            .data<TopologyNode>(nodes)\n            .enter()\n            .append<SVGGElement>(\"g\")\n            .on(\"dblclick\", (event, d: TopologyNode) => {d.fx = null; d.fy = null;})\n            .call(D3.drag<SVGGElement, TopologyNode>()\n                .on(\"start\", (event) => {\n                    if (!event.active) {\n                        simulation.alphaTarget(0.3).restart();\n                    }\n                    event.subject.fx = event.subject.x;\n                    event.subject.fy = event.subject.y;\n                })\n                .on(\"drag\", (event) => {\n                    event.subject.fx = event.x;\n                    event.subject.fy = event.y;\n                })\n                .on(\"end\", (event) => {\n                    if (!event.active) {\n                        simulation.alphaTarget(0);\n                    }\n                }));\n\n        node.append(\"svg:image\")\n            .attr(\"height\", 30)\n            .attr(\"width\", 30)\n            .attr(\"x\", -15)\n            .attr(\"y\", -15)\n            .attr(\"xlink:href\", (d: TopologyNode) => assets[d.type]);\n\n        node.append(\"text\")\n            .text((d: TopologyNode) => d.name)\n            .attr(\"cursor\", \"pointer\")\n            .attr(\"dx\", 12)\n            .attr(\"dy\", \".35em\")\n            .style(\"fill\", (d: TopologyNode) => d.color ? d.color : (d.type === \"network\" ? \"#757575\" : \"black\"));\n\n        if (selectedNode) {\n            node.on(\"click\", (event, d: TopologyNode) => selectedNode(d));\n        }\n\n        if (unselectNode) {\n            rect.on(\"click\", unselectNode);\n        }\n\n        return () => {simulation.stop();};\n    }, [nodes, links, selectedNode, unselectNode, windowSize]);\n\n    return <svg ref={svgRef} height={height} width=\"100%\" />;\n};\n\n\ninterface Props {\n    height: number | string;\n    nodes: TopologyNode[];\n    links: TopologyLink[];\n    selectedNode?: (node: TopologyNode) => void;\n    unselectNode?: () => void;\n}\n\n\ninterface WindowSize {\n    width: number;\n    height: number;\n}\n\n\nexport interface TopologyNode extends D3.SimulationNodeDatum {\n    name: string;\n    id: string;\n    type: \"entity\" | \"network\" | \"project\";\n    color?: string;\n}\n\n\nexport interface TopologyLink extends D3.SimulationLinkDatum<TopologyNode> {\n    weight: number;\n}\n\n\nexport default Topology;\n"],"names":["props","title","subtitle","media","actions","children","isUser","useSelector","state","login","is_user","_jsxs","Card","sx","position","_jsx","CardHeader","subheader","height","backgroundColor","CardMedia","component","alt","image","objectFit","width","top","right","CardContent","CardActions","disableSpacing","display","flexDirection","gap","project","agents","openbach","dispatch","useDispatch","_React$useState","React","_React$useState2","_slicedToArray","newEntityName","storeNewEntityName","_React$useState3","_React$useState4","newEntityDescription","storeNewEntityDescription","_React$useState5","_React$useState6","newEntityAgent","storeNewEntityAgent","handleNameChange","event","target","value","handleDescriptionChange","handleAgentChange","handleEntityAdd","addEntity","name","description","undefined","agent","find","a","address","reserved","filter","map","MenuItem","available","EntityCardTemplate","Button","variant","color","disabled","onClick","TextField","required","margin","label","onChange","fullWidth","multiline","rows","FormControl","mt","InputLabel","id","Select","labelId","jobs","onAgentChange","selector","globalAgent","services","ntp","hasOwnProperty","split","s","startsWith","status","errors","collector_ip","length","j","e","index","msg","options","action","selected","storeSelected","handleChange","handleAction","installOnAgents","jobNames","uninstallOnAgents","forEach","job","addJobAction","setTimeout","window","scrollTo","document","body","scrollHeight","left","behavior","Box","alignItems","flexGrow","multiple","renderValue","values","flexWrap","Chip","_props$entity","entity","networks","onRemove","installedJobs","storeInstalledJobs","handleRemoveEntity","removeEntity","updateEntityAgent","linkedNetworks","network","interface","ip","promise","getJobs","unwrap","then","payload","abort","JobActionSelector","includes","general","EntityAgent","_props$network","current","newName","storeNewName","handleRename","refreshTopology","handleHideNetwork","setMessage","hidden_network","concat","_toConsumableArray","updateProject","_objectSpread","selectedEntity","selectedNetwork","onUnselect","card","EntityCard","NetworkCard","EntityAdd","Fab","size","ContentClear","UnknownIcon","grey","returncode","RunningIcon","CheckCircleIcon","green","BadStatusIcon","red","jobName","handleRefresh","stateJob","handleClick","content","response","JSON","stringify","timeout","clearTimeout","getAgents","ListItemButton","ListItemIcon","JobStateIcon","ListItemText","primary","queries","jobActions","storeTitle","storeContent","handleOpen","handleClose","List","query","JobsStatusesQuery","result","Dialog","open","cancel","DialogContent","DialogContentText","initial","canDoAction","onAction","miscellaneousStyle","_project$owners","isAdmin","is_admin","navigate","useNavigate","storeOpen","storeSelectedEntity","storeSelectedNetwork","handleUnselect","handleSelect","node","type","handleFetchNtp","handleUpdateOwners","owners","handleShowNetworks","showNetworks","handleRefreshTopology","handleProjectUpdate","json","update","parse","handleDeleteProject","deleteProject","_React$useMemo","projectLinks","networkNodes","entityNodes","_entity$networks","n","push","source","weight","_React$useMemo2","links","nodes","canRestricted","users","mb","pb","line","justifyContent","DownloadButton","route","filename","JsonEditor","onUpdate","Topology","selectedNode","unselectNode","Entity","entities","JobsStatusesInfos","useParams","projectId","_useForm","useForm","mode","control","handleSubmit","reset","isValid","formState","onSubmit","_ref","scenario","addScenario","Controller","rules","defaultValue","render","_ref2","_ref2$field","field","onBlur","ref","inputRef","register","importScenario","UploadButton","accept","_props$title","Tooltip","placement","Play","lightGreen","_props$scenario","openbach_functions","args","arguments","onDelete","onLaunch","handleStartScenario","preventDefault","stopPropagation","Object","keys","handleDelete","secondary","Link","to","disableRipple","LaunchScenario","ListItemSecondaryAction","IconButton","edge","Delete","scenarioId","favorites","scenarioToDelete","storeScenarioToDelete","scenarioToLaunch","storeScenarioToLaunch","handleOpenLaunch","handleCloseLaunch","handleOpenDelete","handleCloseDelete","deleteScenario","prefered","projectKey","fromEntries","key","scenarios","_project$scenario","slice","sort","other","localeCompare","favoritedScenarios","ScenariosListItem","regularScenarios","needDivider","Divider","pl","pr","pt","boxSizing","CreateScenario","ImportScenario","Boolean","ScenarioLaunchDialog","onClose","TabPanel","hidden","role","_useParams","selectedTab","storeTab","handleTabChange","setTitle","getProject","selectNewScenario","promises","AppBar","breakOutOfMainBody","Tabs","centered","textColor","indicatorColor","Tab","ProjectDetails","ScenariosList","ScenarioInstancesList","assets","windowSize","storeWindowSize","handleResize","innerWidth","innerHeight","addEventListener","removeEventListener","useWindowSize","svgRef","remove","clientHeight","clientWidth","simulation","D3","force","d","strength","on","link","attr","x","y","svg","rect","append","selectAll","data","enter","Math","sqrt","fx","fy","call","active","alphaTarget","restart","subject","text","style","stop"],"sourceRoot":""}