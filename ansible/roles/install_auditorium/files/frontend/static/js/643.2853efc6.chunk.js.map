{"version":3,"file":"static/js/643.2853efc6.chunk.js","mappings":"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","sources":["components/Users/UserManager.tsx","components/Users/Manage.tsx"],"sourcesContent":["import React from 'react';\n\nimport Checkbox from '@mui/material/Checkbox';\nimport FormGroup from '@mui/material/FormGroup';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemButton from '@mui/material/ListItemButton';\nimport ListItemIcon from '@mui/material/ListItemIcon';\nimport ListItemText from '@mui/material/ListItemText';\n\nimport type {ICredentials} from '../../utils/interfaces';\n\n\nconst UserManager: React.FC<Props> = (props) => {\n    const {user, onToggleDelete, onUserChange} = props;\n    const {username, is_user, is_admin} = user;\n    const [pendingDelete, storePendingDelete] = React.useState<boolean>(false);\n    const [activeUser, storeActiveUser] = React.useState<boolean>(is_user);\n    const [adminUser, storeAdminUser] = React.useState<boolean>(is_admin);\n\n    const togglePendingDelete = React.useCallback(() => {\n        onToggleDelete();\n        storePendingDelete((pending: boolean) => !pending);\n    }, [onToggleDelete]);\n\n    const handlePendingDeleteChanged = React.useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n        onToggleDelete();\n        storePendingDelete(event.target.checked);\n    }, [onToggleDelete]);\n\n    const handleActiveUserChanged = React.useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n        const active = event.target.checked;\n        onUserChange(active, adminUser);\n        storeActiveUser(active);\n    }, [onUserChange, adminUser]);\n\n    const handleAdminUserChanged = React.useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n        const admin = event.target.checked;\n        const active = admin || activeUser;\n        onUserChange(active, admin);\n        storeActiveUser(active);\n        storeAdminUser(admin);\n    }, [onUserChange, activeUser]);\n\n    const labelId = `checkbox-list-label-${username}`;\n\n    return (\n        <ListItem\n            secondaryAction={\n                <FormGroup sx={{display: \"flex\", flexDirection: \"row\"}}>\n                    <FormControlLabel\n                        disabled={adminUser}\n                        control={<Checkbox disableRipple checked={activeUser} onChange={handleActiveUserChanged} />}\n                        label=\"Active\"\n                        sx={{mr: 10}}\n                    />\n                    <FormControlLabel\n                        control={<Checkbox disableRipple checked={adminUser} onChange={handleAdminUserChanged} />}\n                        label=\"Admin\"\n                        sx={{mr: 10}}\n                    />\n                </FormGroup>\n            }\n        >\n            <ListItemButton role={undefined} onClick={togglePendingDelete}>\n                <ListItemIcon>\n                    <Checkbox\n                        edge=\"start\"\n                        checked={pendingDelete}\n                        disableRipple\n                        inputProps={{'aria-labelledby': labelId}}\n                        onChange={handlePendingDeleteChanged}\n                    />\n                </ListItemIcon>\n                <ListItemText id={labelId} primary={username} />\n            </ListItemButton>\n        </ListItem>\n    );\n};\n\n\ninterface Props {\n    user: ICredentials;\n    onToggleDelete: () => void;\n    onUserChange: (active: boolean, admin: boolean) => void;\n}\n\n\nexport default UserManager;\n","import React from 'react';\n\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport List from '@mui/material/List';\n\nimport UserManager from './UserManager';\n\nimport {useSelector, useDispatch} from '../../redux';\nimport {setTitle} from '../../redux/message';\nimport {getUsers, deleteUsers, updateUsers} from '../../api/login';\nimport type {IProfilePermissions} from '../../utils/interfaces';\n\n\nconst Manage: React.FC<Props> = (props) => {\n    const [usersToDelete, storeUsersToDelete] = React.useState<string[]>([]);\n    const [usersToModify, storeUsersToModify] = React.useState<IProfilePermissions[]>([]);\n    const users = useSelector((state) => state.users.users);\n    const dispatch = useDispatch();\n\n    const toggleDelete = React.useCallback((username: string) => () => {\n        storeUsersToDelete((users: string[]) => {\n            const user = users.indexOf(username);\n            if (user < 0) {\n                return [...users, username];\n            } else {\n                return users.slice(0, user).concat(users.slice(user + 1));\n            }\n        });\n    }, []);\n\n    const modifyUser = React.useCallback((username: string) => (active: boolean, admin: boolean) => {\n        storeUsersToModify((users: IProfilePermissions[]) => {\n            let found = false;\n            const newUsers = users.map((u: IProfilePermissions) => {\n                if (u.login === username) {\n                    found = true;\n                    return {login: username, active, admin}\n                } else {\n                    return u;\n                }\n            });\n            if (!found) {\n                newUsers.push({ login: username, active, admin });\n            }\n            return newUsers;\n        });\n    }, []);\n\n    const handleDelete = React.useCallback(() => {\n        dispatch(deleteUsers({usernames: usersToDelete}));\n        storeUsersToDelete([]);\n        storeUsersToModify([]);\n    }, [dispatch, usersToDelete]);\n\n    const handleModify = React.useCallback(() => {\n        dispatch(updateUsers({permissions: usersToModify}));\n        storeUsersToDelete([]);\n        storeUsersToModify([]);\n    }, [dispatch, usersToModify]);\n\n    React.useEffect(() => {\n        dispatch(setTitle(\"OpenBach Administration\"));\n        const promise = dispatch(getUsers());\n        return () => {promise.abort();};\n    }, [dispatch]);\n\n    const permissions = users.map((user) => <UserManager key={user.username} user={user} onToggleDelete={toggleDelete(user.username)} onUserChange={modifyUser(user.username)} />);\n\n    return (\n        <React.Fragment>\n            <List>{permissions}</List>\n            <Box m={5} textAlign=\"right\">\n                <Button\n                    variant=\"contained\"\n                    color=\"secondary\"\n                    onClick={handleDelete}\n                    disabled={!usersToDelete.length}\n                    sx={{m: 5}}\n                >\n                    Delete Selected Users\n                </Button>\n                <Button\n                    variant=\"contained\"\n                    color=\"secondary\"\n                    onClick={handleModify}\n                    disabled={!usersToModify.length}\n                    sx={{m: 5}}\n                >\n                    Apply Modifications\n                </Button>\n            </Box>\n        </React.Fragment>\n    );\n};\n\n\ninterface Props {\n}\n\n\nexport default Manage;\n"],"names":["props","user","onToggleDelete","onUserChange","username","is_user","is_admin","_React$useState","React","_React$useState2","_slicedToArray","pendingDelete","storePendingDelete","_React$useState3","_React$useState4","activeUser","storeActiveUser","_React$useState5","_React$useState6","adminUser","storeAdminUser","togglePendingDelete","pending","handlePendingDeleteChanged","event","target","checked","handleActiveUserChanged","active","handleAdminUserChanged","admin","labelId","concat","_jsx","ListItem","secondaryAction","_jsxs","FormGroup","sx","display","flexDirection","children","FormControlLabel","disabled","control","Checkbox","disableRipple","onChange","label","mr","ListItemButton","role","undefined","onClick","ListItemIcon","edge","inputProps","ListItemText","id","primary","usersToDelete","storeUsersToDelete","usersToModify","storeUsersToModify","users","useSelector","state","dispatch","useDispatch","toggleDelete","indexOf","_toConsumableArray","slice","modifyUser","found","newUsers","map","u","login","push","handleDelete","deleteUsers","usernames","handleModify","updateUsers","permissions","setTitle","promise","getUsers","abort","UserManager","List","Box","m","textAlign","Button","variant","color","length"],"sourceRoot":""}